{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/owenkraft/the_odin_project/cv-generator-react/cv-generator-react/src/components/Experience.js\";\nimport React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\nimport uniqid from \"uniqid\";\n\nclass Experience extends Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [{\n        id: uniqid(),\n        employer: \"bugaloo\",\n        role: \"maker\",\n        responsibilities: [\"make stuff\", \"make more stuff\", \"make even more stuff\"],\n        yearStarted: 2014,\n        yearEnded: 2015,\n        editFlag: false\n      }, {\n        id: uniqid(),\n        employer: \"electric\",\n        role: \"shaker\",\n        responsibilities: [\"shake stuff up\", \"shake stuff up more\", \"shake stuff up even more\"],\n        yearStarted: 2015,\n        yearEnded: 2020,\n        editFlag: false\n      }],\n      placeholderJob: {\n        responsibilities: [\"describe responsibility here\", \"describe responsibility here\", \"describe responsibility here\"]\n      },\n      activeEditFlag: false,\n      addJobFlag: false\n    };\n    this.editJob = this.editJob.bind(this);\n    this.updateJob = this.updateJob.bind(this);\n    this.addJob = this.addJob.bind(this);\n    this.submitNewJob = this.submitNewJob.bind(this);\n    this.addResponsibility = this.addResponsibility.bind(this);\n  }\n\n  submitNewJob(e) {\n    const newJobNode = e.target.closest(\".new-job\");\n    const employer = newJobNode.querySelector(\".edit-employer\").value;\n    const role = newJobNode.querySelector(\".edit-role\").value;\n    const yearStarted = newJobNode.querySelector(\".edit-year-started\").value;\n    const yearEnded = newJobNode.querySelector(\".edit-year-ended\").value;\n    const newJobResponsibilityLength = newJobNode.querySelector(\".edit-responsibilities\").childNodes.length;\n    const newJob = {\n      id: uniqid(),\n      employer: employer,\n      role: role,\n      responsibilities: [],\n      yearStarted: yearStarted,\n      yearEnded: yearEnded,\n      editFlag: false\n    };\n\n    for (let i = 0; i < newJobResponsibilityLength; i++) {\n      const children = newJobNode.parentNode.querySelector(\".edit-responsibilities\");\n      let newJobResponsibility = children.childNodes[i].firstChild.value;\n      newJob.responsibilities.push(newJobResponsibility);\n    }\n\n    this.setState({\n      jobs: [...this.state.jobs, newJob],\n      addJobFlag: !this.state.addJobFlag\n    });\n    console.log(this.state.jobs);\n  }\n\n  editJob(job) {\n    const jobsCopy = this.state.jobs;\n    let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n    selectedJob.editFlag = !selectedJob.editFlag;\n    this.setState({\n      jobs: jobsCopy\n    });\n  }\n\n  updateJob(job) {\n    const jobsCopy = this.state.jobs;\n    let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n    let selectedJobNode = document.getElementById(selectedJob.id);\n    const employer = selectedJobNode.querySelector(\".edit-employer\").value;\n    const role = selectedJobNode.querySelector(\".edit-role\").value;\n    const yearStarted = selectedJobNode.querySelector(\".edit-year-started\").value;\n    const yearEnded = selectedJobNode.querySelector(\".edit-year-ended\").value;\n\n    for (let i = 0; i < selectedJob.responsibilities.length; i++) {\n      const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n      let selectedResponsibility = children.childNodes[i].firstChild.value;\n      selectedJob.responsibilities[i] = selectedResponsibility;\n    }\n\n    selectedJob.employer = employer;\n    selectedJob.role = role;\n    selectedJob.yearStarted = yearStarted;\n    selectedJob.yearEnded = yearEnded;\n    selectedJob.editFlag = !selectedJob.editFlag;\n    this.setState({\n      jobs: jobsCopy\n    });\n  }\n\n  addJob() {\n    console.log(\"sdfasd\");\n    this.setState({\n      addJobFlag: !this.state.addJobFlag\n    });\n  }\n\n  addResponsibility(e, job) {\n    const checkIfNewJob = e.target.closest(\".job-block\").classList.contains(\"new-job\");\n    console.log(e.target.closest(\".job-block\"));\n\n    if (checkIfNewJob) {\n      const placeholderJobCopy = this.state.placeholderJob;\n      const placeholderJobNode = e.target.closest(\".new-job\");\n      const children = placeholderJobNode.querySelector(\".edit-responsibilities\");\n      const newResp = \"describe responsibility here\";\n\n      for (let i = 0; i < placeholderJobCopy.responsibilities.length; i++) {\n        let selectedResponsibility = children.childNodes[i].firstChild.value;\n        placeholderJobCopy.responsibilities[i] = selectedResponsibility;\n      }\n\n      placeholderJobCopy.responsibilities = [...this.state.placeholderJob.responsibilities, newResp];\n      this.setState({\n        placeholderJob: placeholderJobCopy\n      });\n    } else {\n      const jobsCopy = this.state.jobs;\n      const selectedJob = jobsCopy.find(blah => blah.id === job.id);\n      const selectedJobNode = document.getElementById(job.id);\n      const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n      const newResp = \"describe responsibility here\";\n\n      for (let i = 0; i < selectedJob.responsibilities.length; i++) {\n        let selectedResponsibility = children.childNodes[i].firstChild.value;\n        selectedJob.responsibilities[i] = selectedResponsibility;\n      }\n\n      selectedJob.responsibilities.push(newResp);\n      this.setState({\n        jobs: jobsCopy\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Experience \", /*#__PURE__*/_jsxDEV(Emoji, {\n          symbol: \"\\uD83D\\uDDFA\\uFE0F\",\n          label: \"world-map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.addJob,\n          className: \"float-right\",\n          children: \"add job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), this.state.addJobFlag && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-block new-job\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"edit-employer\",\n          type: \"text\",\n          defaultValue: \"employer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"edit-role\",\n          type: \"text\",\n          defaultValue: \"role\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"float-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"edit-year-started\",\n            type: \"number\",\n            min: \"1900\",\n            max: \"2099\",\n            step: \"1\",\n            defaultValue: \"2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"edit-year-ended\",\n            type: \"number\",\n            min: \"1900\",\n            max: \"2099\",\n            step: \"1\",\n            defaultValue: \"2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"edit-responsibilities\",\n            children: this.state.placeholderJob.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                id: uniqid(),\n                className: \"edit-responsibility\",\n                type: \"text\",\n                defaultValue: responsibility\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 41\n              }, this)\n            }, uniqid(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => this.addResponsibility(e),\n            children: \"add responsibility\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          onClick: e => this.submitNewJob(e),\n          className: \"far fa-check-square\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), this.state.jobs.map(job => {\n        if (job.editFlag === true) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: job.id,\n            className: \"job-block\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"edit-employer\",\n              type: \"text\",\n              defaultValue: job.employer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"edit-role\",\n              type: \"text\",\n              defaultValue: job.role\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"float-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"edit-year-started\",\n                type: \"number\",\n                min: \"1900\",\n                max: \"2099\",\n                step: \"1\",\n                defaultValue: job.yearStarted\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"edit-year-ended\",\n                type: \"number\",\n                min: \"1900\",\n                max: \"2099\",\n                step: \"1\",\n                defaultValue: job.yearEnded\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"edit-responsibilities\",\n                children: job.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    id: uniqid(),\n                    className: \"edit-responsibility\",\n                    type: \"text\",\n                    defaultValue: responsibility\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 49\n                  }, this)\n                }, uniqid(), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: e => this.addResponsibility(e, job),\n                children: \"add responsibility\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              onClick: () => this.updateJob({\n                job\n              }),\n              className: \"far fa-check-square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [job.employer, \" - \", job.role, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n              onClick: () => this.editJob({\n                job\n              }),\n              className: \"far fa-edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 61\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"float-right\",\n              children: [job.yearStarted, \" - \", job.yearEnded]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: job.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: responsibility\n              }, uniqid(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 29\n          }, this);\n        }\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Experience;","map":{"version":3,"sources":["/Users/owenkraft/the_odin_project/cv-generator-react/cv-generator-react/src/components/Experience.js"],"names":["React","Component","Emoji","uniqid","Experience","constructor","state","jobs","id","employer","role","responsibilities","yearStarted","yearEnded","editFlag","placeholderJob","activeEditFlag","addJobFlag","editJob","bind","updateJob","addJob","submitNewJob","addResponsibility","e","newJobNode","target","closest","querySelector","value","newJobResponsibilityLength","childNodes","length","newJob","i","children","parentNode","newJobResponsibility","firstChild","push","setState","console","log","job","jobsCopy","selectedJob","find","blah","selectedJobNode","document","getElementById","selectedResponsibility","checkIfNewJob","classList","contains","placeholderJobCopy","placeholderJobNode","newResp","render","map","responsibility"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\nimport uniqid from \"uniqid\";\n\nclass Experience extends Component {\n    constructor() {\n        super()\n        this.state = {\n            jobs: [\n                {\n                    id: uniqid(),\n                    employer: \"bugaloo\",\n                    role: \"maker\",\n                    responsibilities: [\n                        \"make stuff\",\n                        \"make more stuff\",\n                        \"make even more stuff\",\n                    ],\n                    yearStarted: 2014,\n                    yearEnded: 2015,\n                    editFlag: false,\n                },\n                {\n                    id: uniqid(),\n                    employer: \"electric\",\n                    role: \"shaker\",\n                    responsibilities: [\n                        \"shake stuff up\",\n                        \"shake stuff up more\",\n                        \"shake stuff up even more\",\n                    ],\n                    yearStarted: 2015,\n                    yearEnded: 2020,\n                    editFlag: false,\n                },\n            ],\n            placeholderJob: {\n                responsibilities: [\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                ],\n            },\n            activeEditFlag: false,\n            addJobFlag: false,\n        }\n\n        this.editJob = this.editJob.bind(this);\n        this.updateJob = this.updateJob.bind(this);\n        this.addJob = this.addJob.bind(this);\n        this.submitNewJob = this.submitNewJob.bind(this);\n        this.addResponsibility = this.addResponsibility.bind(this);\n    }\n\n    submitNewJob(e){\n        const newJobNode = e.target.closest(\".new-job\");\n\n        const employer = newJobNode.querySelector(\".edit-employer\").value;\n        const role = newJobNode.querySelector(\".edit-role\").value;\n        const yearStarted = newJobNode.querySelector(\".edit-year-started\").value;\n        const yearEnded = newJobNode.querySelector(\".edit-year-ended\").value;\n        const newJobResponsibilityLength = newJobNode.querySelector(\".edit-responsibilities\").childNodes.length;\n\n        const newJob = {\n            id: uniqid(),\n            employer: employer,\n            role: role,\n            responsibilities: [],\n            yearStarted: yearStarted,\n            yearEnded: yearEnded,\n            editFlag: false,\n        }\n\n        for(let i = 0; i < newJobResponsibilityLength; i++){\n            const children = newJobNode.parentNode.querySelector(\".edit-responsibilities\");\n            let newJobResponsibility = children.childNodes[i].firstChild.value;\n            newJob.responsibilities.push(newJobResponsibility);\n        }\n  \n        this.setState({\n            jobs: [...this.state.jobs, newJob],\n            addJobFlag: !this.state.addJobFlag,\n        })\n        console.log(this.state.jobs)\n    }\n\n    editJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        selectedJob.editFlag = !selectedJob.editFlag;\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    updateJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        let selectedJobNode = document.getElementById(selectedJob.id)\n\n        const employer = selectedJobNode.querySelector(\".edit-employer\").value;\n        const role = selectedJobNode.querySelector(\".edit-role\").value;\n        const yearStarted = selectedJobNode.querySelector(\".edit-year-started\").value;\n        const yearEnded = selectedJobNode.querySelector(\".edit-year-ended\").value;\n\n        for(let i =0; i < selectedJob.responsibilities.length; i++){\n            const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n            let selectedResponsibility = children.childNodes[i].firstChild.value;\n            selectedJob.responsibilities[i] = selectedResponsibility;\n        }\n\n        selectedJob.employer = employer;\n        selectedJob.role = role;\n        selectedJob.yearStarted = yearStarted;\n        selectedJob.yearEnded = yearEnded;\n        selectedJob.editFlag = !selectedJob.editFlag;\n\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    addJob(){\n        console.log(\"sdfasd\")\n        this.setState({\n            addJobFlag: !this.state.addJobFlag,\n        })\n    }\n\n    addResponsibility(e,job){\n        const checkIfNewJob = e.target.closest(\".job-block\").classList.contains(\"new-job\");\n        console.log(e.target.closest(\".job-block\"));\n\n        if(checkIfNewJob){\n            const placeholderJobCopy = this.state.placeholderJob;\n            const placeholderJobNode = e.target.closest(\".new-job\");\n            const children = placeholderJobNode.querySelector(\".edit-responsibilities\");\n            const newResp = \"describe responsibility here\";\n\n            for(let i =0; i < placeholderJobCopy.responsibilities.length; i++){\n                let selectedResponsibility = children.childNodes[i].firstChild.value;\n                placeholderJobCopy.responsibilities[i] = selectedResponsibility;\n            }\n\n            placeholderJobCopy.responsibilities = [...this.state.placeholderJob.responsibilities, newResp]\n    \n            this.setState({\n                placeholderJob: placeholderJobCopy\n            })\n        } else {\n            const jobsCopy = this.state.jobs;\n            const selectedJob = jobsCopy.find(blah => blah.id === job.id);\n            const selectedJobNode = document.getElementById(job.id);\n            const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n            const newResp = \"describe responsibility here\";\n            \n\n            for(let i =0; i < selectedJob.responsibilities.length; i++){\n                let selectedResponsibility = children.childNodes[i].firstChild.value;\n                selectedJob.responsibilities[i] = selectedResponsibility;\n            }\n\n            selectedJob.responsibilities.push(newResp);\n    \n            this.setState({\n                jobs: jobsCopy,\n            })\n        }\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Experience <Emoji symbol=\"🗺️\" label=\"world-map\" />\n                    <button onClick={this.addJob} className=\"float-right\">add job</button>\n                </h1>\n\n                {\n                    this.state.addJobFlag &&\n\n                    <div className=\"job-block new-job\">\n                        <input className=\"edit-employer\" type=\"text\" defaultValue=\"employer\" />\n                        <input className=\"edit-role\" type=\"text\" defaultValue=\"role\" />\n                        <span className=\"float-right\">\n                            <input className=\"edit-year-started\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue=\"2020\" />\n                            <input className=\"edit-year-ended\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue=\"2020\" />\n                        </span>\n                        <div>\n                            <ul className=\"edit-responsibilities\">\n                                {\n                                    this.state.placeholderJob.responsibilities.map(\n                                    (responsibility) => \n                                    <li key={uniqid()}>\n                                        <input id={uniqid()} className=\"edit-responsibility\" type=\"text\" defaultValue={responsibility} />\n                                    </li>\n                                    )\n                                }\n                            </ul>\n                            <button onClick={(e) => this.addResponsibility(e)}>add responsibility</button>\n                        </div>\n\n                        <i onClick={(e) => this.submitNewJob(e)} className=\"far fa-check-square\"></i>\n                    </div>\n                }\n\n                {this.state.jobs.map(\n                    (job) => {if(job.editFlag === true){\n                        return (\n                            <div id={job.id} className=\"job-block\">\n                                <input className=\"edit-employer\" type=\"text\" defaultValue={job.employer} />\n                                <input className=\"edit-role\" type=\"text\" defaultValue={job.role} />\n                                <span className=\"float-right\">\n                                    <input className=\"edit-year-started\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={job.yearStarted} />\n                                    <input className=\"edit-year-ended\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={job.yearEnded} />\n                                </span>\n                                <div>\n                                    <ul className=\"edit-responsibilities\">\n                                        {\n                                            job.responsibilities.map(\n                                            (responsibility) => \n                                            <li key={uniqid()}>\n                                                <input id={uniqid()} className=\"edit-responsibility\" type=\"text\" defaultValue={responsibility} />\n                                            </li>\n                                            )\n                                        }\n                                    </ul>\n                                    <button onClick={(e) => this.addResponsibility(e,job)}>add responsibility</button>\n                                </div>\n                                <i onClick={() => this.updateJob({job})} className=\"far fa-check-square\"></i>\n                            </div>\n                        )\n                    } else {\n                        return (\n                            <div>\n                                {job.employer} - {job.role} <i onClick={() => this.editJob({job})} className=\"far fa-edit\"></i>\n                                <span className=\"float-right\">\n                                    {job.yearStarted} - {job.yearEnded}\n                                </span>\n                                <ul>\n                                    {job.responsibilities.map(\n                                        (responsibility) => \n                                        <li key={uniqid()}>{responsibility}</li>)}\n                                </ul>\n                                \n                            </div>\n                        )\n                    }\n                }\n                )\n                \n                }\n            </div>\n        )\n    }\n}\n  \n  export default Experience;"]},"metadata":{},"sourceType":"module"}