{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/owenkraft/the_odin_project/react-resume-builder/src/components/Experience.js\";\nimport React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\nimport uniqid from \"uniqid\";\n\nclass Experience extends Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [{\n        id: uniqid(),\n        employer: \"Bob's Burgers\",\n        role: \"Chef, Owner and Operator\",\n        responsibilities: [\"Make the burgers\", \"Serve the burgers\", \"Clean up afterwards\"],\n        yearStarted: 2011,\n        yearEnded: 2020,\n        editFlag: false\n      }, {\n        id: uniqid(),\n        employer: \"Big Bob's Diner\",\n        role: \"Cook and Server\",\n        responsibilities: [\"Take orders\", \"Cook the orders\", \"Serve the orders\"],\n        yearStarted: 2001,\n        yearEnded: 2010,\n        editFlag: false\n      }],\n      placeholderJob: {\n        responsibilities: [\"describe responsibility here\", \"describe responsibility here\", \"describe responsibility here\"]\n      },\n      defaultJob: {\n        responsibilities: [\"describe responsibility here\", \"describe responsibility here\", \"describe responsibility here\"]\n      },\n      activeEditFlag: false,\n      addJobFlag: false\n    };\n    this.editJob = this.editJob.bind(this);\n    this.updateJob = this.updateJob.bind(this);\n    this.addJob = this.addJob.bind(this);\n    this.removeJob = this.removeJob.bind(this);\n    this.submitNewJob = this.submitNewJob.bind(this);\n    this.addResponsibility = this.addResponsibility.bind(this);\n    this.removeResponsibility = this.removeResponsibility.bind(this);\n    this.toggleEditVisibility = this.toggleEditVisibility.bind(this);\n  }\n\n  submitNewJob(e) {\n    const newJobNode = e.target.closest(\".new-job\");\n    const employer = newJobNode.querySelector(\".edit-employer\").value;\n    const role = newJobNode.querySelector(\".edit-role\").value;\n    const yearStarted = newJobNode.querySelector(\".edit-year-started\").value;\n    const yearEnded = newJobNode.querySelector(\".edit-year-ended\").value;\n    const newJobResponsibilityLength = newJobNode.querySelector(\".edit-responsibilities\").childNodes.length;\n    const newJob = {\n      id: uniqid(),\n      employer: employer,\n      role: role,\n      responsibilities: [],\n      yearStarted: yearStarted,\n      yearEnded: yearEnded,\n      editFlag: false\n    };\n\n    for (let i = 0; i < newJobResponsibilityLength; i++) {\n      const children = newJobNode.parentNode.querySelector(\".edit-responsibilities\");\n      let newJobResponsibility = children.childNodes[i].firstChild.value;\n      newJob.responsibilities.push(newJobResponsibility);\n    }\n\n    this.setState({\n      // jobs: [...this.state.jobs, newJob],\n      jobs: [newJob, ...this.state.jobs],\n      addJobFlag: !this.state.addJobFlag,\n      placeholderJob: this.state.defaultJob\n    });\n    console.log(this.state.jobs);\n  }\n\n  editJob(job) {\n    const jobsCopy = this.state.jobs;\n    let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n    selectedJob.editFlag = !selectedJob.editFlag;\n    this.setState({\n      jobs: jobsCopy\n    });\n  }\n\n  updateJob(job) {\n    const jobsCopy = this.state.jobs;\n    let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n    let selectedJobNode = document.getElementById(selectedJob.id);\n    const employer = selectedJobNode.querySelector(\".edit-employer\").value;\n    const role = selectedJobNode.querySelector(\".edit-role\").value;\n    const yearStarted = selectedJobNode.querySelector(\".edit-year-started\").value;\n    const yearEnded = selectedJobNode.querySelector(\".edit-year-ended\").value;\n\n    for (let i = 0; i < selectedJob.responsibilities.length; i++) {\n      const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n      let selectedResponsibility = children.childNodes[i].firstChild.value;\n      selectedJob.responsibilities[i] = selectedResponsibility;\n    }\n\n    selectedJob.employer = employer;\n    selectedJob.role = role;\n    selectedJob.yearStarted = yearStarted;\n    selectedJob.yearEnded = yearEnded;\n    selectedJob.editFlag = !selectedJob.editFlag;\n    this.setState({\n      jobs: jobsCopy\n    });\n  }\n\n  addJob() {\n    this.setState({\n      addJobFlag: !this.state.addJobFlag\n    });\n  }\n\n  removeJob(e, job) {\n    const jobsCopy = this.state.jobs;\n    const jobsCopyIndex = jobsCopy.findIndex(jobCopy => jobCopy.id === job.id);\n    jobsCopy.splice(jobsCopyIndex, 1);\n    this.setState({\n      jobs: jobsCopy\n    });\n  }\n\n  addResponsibility(e, job) {\n    const checkIfNewJob = e.target.closest(\".job-block\").classList.contains(\"new-job\");\n\n    if (checkIfNewJob) {\n      const placeholderJobCopy = this.state.placeholderJob;\n      const placeholderJobNode = e.target.closest(\".new-job\");\n      const children = placeholderJobNode.querySelector(\".edit-responsibilities\");\n      const newResp = \"describe responsibility here\";\n\n      for (let i = 0; i < placeholderJobCopy.responsibilities.length; i++) {\n        let selectedResponsibility = children.childNodes[i].firstChild.value;\n        placeholderJobCopy.responsibilities[i] = selectedResponsibility;\n      }\n\n      placeholderJobCopy.responsibilities = [...this.state.placeholderJob.responsibilities, newResp];\n      this.setState({\n        placeholderJob: placeholderJobCopy\n      });\n    } else {\n      const jobsCopy = this.state.jobs;\n      const selectedJob = jobsCopy.find(blah => blah.id === job.id);\n      const selectedJobNode = document.getElementById(job.id);\n      const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n      const newResp = \"describe responsibility here\";\n\n      for (let i = 0; i < selectedJob.responsibilities.length; i++) {\n        let selectedResponsibility = children.childNodes[i].firstChild.value;\n        selectedJob.responsibilities[i] = selectedResponsibility;\n      }\n\n      selectedJob.responsibilities.push(newResp);\n      this.setState({\n        jobs: jobsCopy\n      });\n    }\n  }\n\n  removeResponsibility(e, job) {\n    const checkIfNewJob = e.target.closest(\".job-block\").classList.contains(\"new-job\");\n\n    if (checkIfNewJob) {\n      const placeholderJobCopy = this.state.placeholderJob;\n      const placeholderNodeID = e.target.parentNode.id;\n      const responsibilitiesNode = e.target.closest(\".edit-responsibilities\");\n      const childrenArray = Array.from(responsibilitiesNode.childNodes);\n      const childrenArrayIndex = childrenArray.findIndex(node => node.id === placeholderNodeID);\n\n      for (let i = 0; i < placeholderJobCopy.responsibilities.length; i++) {\n        let selectedResponsibility = responsibilitiesNode.childNodes[i].firstChild.value;\n        placeholderJobCopy.responsibilities[i] = selectedResponsibility;\n      }\n\n      ;\n      placeholderJobCopy.responsibilities.splice(childrenArrayIndex, 1);\n      this.setState({\n        placeholderJob: placeholderJobCopy\n      });\n    } else {\n      const jobsCopy = this.state.jobs;\n      const selectedJob = jobsCopy.find(blah => blah.id === job.id);\n      const selectedNodeID = e.target.parentNode.id;\n      const responsibilitiesNode = e.target.closest(\".edit-responsibilities\");\n      const childrenArray = Array.from(responsibilitiesNode.childNodes);\n      const childrenArrayIndex = childrenArray.findIndex(node => node.id === selectedNodeID);\n\n      for (let i = 0; i < selectedJob.responsibilities.length; i++) {\n        let selectedResponsibility = responsibilitiesNode.childNodes[i].firstChild.value;\n        selectedJob.responsibilities[i] = selectedResponsibility;\n      }\n\n      ;\n      selectedJob.responsibilities.splice(childrenArrayIndex, 1);\n      this.setState({\n        jobs: jobsCopy\n      });\n    }\n  }\n\n  toggleEditVisibility() {\n    const updateActiveEditFlag = !this.state.activeEditFlag;\n    const editJobButton = document.getElementById(\"edit-job\");\n    const editJobButtonHTML = \"<i class='fas fa-cog'></i>\";\n\n    if (updateActiveEditFlag === true) {\n      editJobButton.innerHTML = \"all done\";\n      editJobButton.classList.add(\"btn-green-inverse\");\n    } else {\n      editJobButton.innerHTML = editJobButtonHTML;\n      editJobButton.classList.remove(\"btn-green-inverse\");\n    }\n\n    const addJobButton = document.getElementById(\"add-job\");\n    addJobButton.classList.toggle(\"edit-job-hidden\");\n    this.setState({\n      activeEditFlag: updateActiveEditFlag\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Experience \", /*#__PURE__*/_jsxDEV(Emoji, {\n          symbol: \"\\uD83D\\uDCBC\",\n          label: \"briefcase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"edit-job\",\n          onClick: this.toggleEditVisibility,\n          className: \"float-right\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"fas fa-cog\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 103\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"add-job\",\n        onClick: this.addJob,\n        className: \" edit-job-toggle edit-job-hidden btn-green btn-add-margin\",\n        children: \"add job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), this.state.addJobFlag && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-block new-job\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"role\",\n            children: \"role: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"role\",\n            className: \"edit-role\",\n            type: \"text\",\n            placeholder: \"what was your job title?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"employer\",\n          children: \"employer: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"employer\",\n          className: \"edit-employer\",\n          type: \"text\",\n          placeholder: \"who did you work for?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"float-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"edit-year-started\",\n            type: \"number\",\n            min: \"1900\",\n            max: \"2099\",\n            step: \"1\",\n            placeholder: \"2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 29\n          }, this), \"-\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"edit-year-ended\",\n            type: \"number\",\n            min: \"1900\",\n            max: \"2099\",\n            step: \"1\",\n            placeholder: \"2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"edit-responsibilities\",\n            children: this.state.placeholderJob.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n              id: uniqid(),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: uniqid(),\n                className: \"edit-responsibility\",\n                type: \"text\",\n                placeholder: responsibility\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 41\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                onClick: e => this.removeResponsibility(e),\n                className: \"fas fa-times\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 138\n              }, this)]\n            }, uniqid(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => this.addResponsibility(e),\n            className: \"btn-add-responsibility\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"fas fa-plus\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 115\n            }, this), \" add line item\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => this.submitNewJob(e),\n          className: \"btn-green btn-add-margin\",\n          children: \"all done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }, this), this.state.jobs.map(job => {\n        if (job.editFlag === true) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: job.id,\n            className: \"job-block\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                for: \"role\",\n                children: \"role: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"role\",\n                className: \"edit-role\",\n                type: \"text\",\n                defaultValue: job.role\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"employer\",\n              children: \"employer: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"edit-employer\",\n              type: \"text\",\n              defaultValue: job.employer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"float-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"edit-year-started\",\n                type: \"number\",\n                min: \"1900\",\n                max: \"2099\",\n                step: \"1\",\n                defaultValue: job.yearStarted\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 37\n              }, this), \"-\", /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"edit-year-ended\",\n                type: \"number\",\n                min: \"1900\",\n                max: \"2099\",\n                step: \"1\",\n                defaultValue: job.yearEnded\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"edit-responsibilities\",\n                children: job.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n                  id: uniqid(),\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    id: uniqid(),\n                    className: \"edit-responsibility\",\n                    type: \"text\",\n                    defaultValue: responsibility\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 49\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    onClick: e => this.removeResponsibility(e, job),\n                    className: \"btn-dimgray fas fa-times\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 147\n                  }, this)]\n                }, uniqid(), true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: e => this.addResponsibility(e, job),\n                className: \"btn-add-responsibility\",\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"fas fa-plus\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 127\n                }, this), \" add line item\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => this.updateJob({\n                  job\n                }),\n                className: \"btn-green btn-add-margin\",\n                children: \"all done\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: e => this.removeJob(e, job),\n                className: \"btn-red btn-add-margin float-right\",\n                children: \"delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 29\n          }, this);\n        } else if (this.state.activeEditFlag === true) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [job.role, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => this.editJob({\n                  job\n                }),\n                className: \"float-right\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"fas fa-cog\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 105\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [job.employer, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"float-right\",\n                children: [job.yearStarted, \" - \", job.yearEnded]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: job.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n                id: uniqid(),\n                children: responsibility\n              }, uniqid(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"job-role\",\n                children: job.role\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => this.editJob({\n                  job\n                }),\n                className: \"float-right edit-job-hidden\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"fas fa-cog\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 121\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [job.employer, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"float-right\",\n                children: [job.yearStarted, \" - \", job.yearEnded]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: job.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n                id: uniqid(),\n                children: responsibility\n              }, uniqid(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 29\n          }, this);\n        }\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Experience;","map":{"version":3,"sources":["/Users/owenkraft/the_odin_project/react-resume-builder/src/components/Experience.js"],"names":["React","Component","Emoji","uniqid","Experience","constructor","state","jobs","id","employer","role","responsibilities","yearStarted","yearEnded","editFlag","placeholderJob","defaultJob","activeEditFlag","addJobFlag","editJob","bind","updateJob","addJob","removeJob","submitNewJob","addResponsibility","removeResponsibility","toggleEditVisibility","e","newJobNode","target","closest","querySelector","value","newJobResponsibilityLength","childNodes","length","newJob","i","children","parentNode","newJobResponsibility","firstChild","push","setState","console","log","job","jobsCopy","selectedJob","find","blah","selectedJobNode","document","getElementById","selectedResponsibility","jobsCopyIndex","findIndex","jobCopy","splice","checkIfNewJob","classList","contains","placeholderJobCopy","placeholderJobNode","newResp","placeholderNodeID","responsibilitiesNode","childrenArray","Array","from","childrenArrayIndex","node","selectedNodeID","updateActiveEditFlag","editJobButton","editJobButtonHTML","innerHTML","add","remove","addJobButton","toggle","render","map","responsibility"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAC/BI,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,CACF;AACIC,QAAAA,EAAE,EAAEL,MAAM,EADd;AAEIM,QAAAA,QAAQ,EAAE,eAFd;AAGIC,QAAAA,IAAI,EAAE,0BAHV;AAIIC,QAAAA,gBAAgB,EAAE,CACd,kBADc,EAEd,mBAFc,EAGd,qBAHc,CAJtB;AASIC,QAAAA,WAAW,EAAE,IATjB;AAUIC,QAAAA,SAAS,EAAE,IAVf;AAWIC,QAAAA,QAAQ,EAAE;AAXd,OADE,EAcF;AACIN,QAAAA,EAAE,EAAEL,MAAM,EADd;AAEIM,QAAAA,QAAQ,EAAE,iBAFd;AAGIC,QAAAA,IAAI,EAAE,iBAHV;AAIIC,QAAAA,gBAAgB,EAAE,CACd,aADc,EAEd,iBAFc,EAGd,kBAHc,CAJtB;AASIC,QAAAA,WAAW,EAAE,IATjB;AAUIC,QAAAA,SAAS,EAAE,IAVf;AAWIC,QAAAA,QAAQ,EAAE;AAXd,OAdE,CADG;AA6BTC,MAAAA,cAAc,EAAE;AACZJ,QAAAA,gBAAgB,EAAE,CACd,8BADc,EAEd,8BAFc,EAGd,8BAHc;AADN,OA7BP;AAoCTK,MAAAA,UAAU,EAAE;AACRL,QAAAA,gBAAgB,EAAE,CACd,8BADc,EAEd,8BAFc,EAGd,8BAHc;AADV,OApCH;AA2CTM,MAAAA,cAAc,EAAE,KA3CP;AA4CTC,MAAAA,UAAU,EAAE;AA5CH,KAAb;AA+CA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKG,SAAL,GAAiB,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKI,YAAL,GAAoB,KAAKA,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKK,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBL,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKM,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BN,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKO,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BP,IAA1B,CAA+B,IAA/B,CAA5B;AACH;;AAEDI,EAAAA,YAAY,CAACI,CAAD,EAAG;AACX,UAAMC,UAAU,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,UAAjB,CAAnB;AAEA,UAAMtB,QAAQ,GAAGoB,UAAU,CAACG,aAAX,CAAyB,gBAAzB,EAA2CC,KAA5D;AACA,UAAMvB,IAAI,GAAGmB,UAAU,CAACG,aAAX,CAAyB,YAAzB,EAAuCC,KAApD;AACA,UAAMrB,WAAW,GAAGiB,UAAU,CAACG,aAAX,CAAyB,oBAAzB,EAA+CC,KAAnE;AACA,UAAMpB,SAAS,GAAGgB,UAAU,CAACG,aAAX,CAAyB,kBAAzB,EAA6CC,KAA/D;AACA,UAAMC,0BAA0B,GAAGL,UAAU,CAACG,aAAX,CAAyB,wBAAzB,EAAmDG,UAAnD,CAA8DC,MAAjG;AAEA,UAAMC,MAAM,GAAG;AACX7B,MAAAA,EAAE,EAAEL,MAAM,EADC;AAEXM,MAAAA,QAAQ,EAAEA,QAFC;AAGXC,MAAAA,IAAI,EAAEA,IAHK;AAIXC,MAAAA,gBAAgB,EAAE,EAJP;AAKXC,MAAAA,WAAW,EAAEA,WALF;AAMXC,MAAAA,SAAS,EAAEA,SANA;AAOXC,MAAAA,QAAQ,EAAE;AAPC,KAAf;;AAUA,SAAI,IAAIwB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,0BAAnB,EAA+CI,CAAC,EAAhD,EAAmD;AAC/C,YAAMC,QAAQ,GAAGV,UAAU,CAACW,UAAX,CAAsBR,aAAtB,CAAoC,wBAApC,CAAjB;AACA,UAAIS,oBAAoB,GAAGF,QAAQ,CAACJ,UAAT,CAAoBG,CAApB,EAAuBI,UAAvB,CAAkCT,KAA7D;AACAI,MAAAA,MAAM,CAAC1B,gBAAP,CAAwBgC,IAAxB,CAA6BF,oBAA7B;AACH;;AAED,SAAKG,QAAL,CAAc;AACV;AACArC,MAAAA,IAAI,EAAE,CAAC8B,MAAD,EAAS,GAAG,KAAK/B,KAAL,CAAWC,IAAvB,CAFI;AAGVW,MAAAA,UAAU,EAAE,CAAC,KAAKZ,KAAL,CAAWY,UAHd;AAIVH,MAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWU;AAJjB,KAAd;AAMA6B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxC,KAAL,CAAWC,IAAvB;AACH;;AAEDY,EAAAA,OAAO,CAAC4B,GAAD,EAAK;AACR,UAAMC,QAAQ,GAAG,KAAK1C,KAAL,CAAWC,IAA5B;AACA,QAAI0C,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAI,IAAIA,IAAI,CAAC3C,EAAL,KAAYuC,GAAG,CAACA,GAAJ,CAAQvC,EAA1C,CAAlB;AACAyC,IAAAA,WAAW,CAACnC,QAAZ,GAAuB,CAACmC,WAAW,CAACnC,QAApC;AACA,SAAK8B,QAAL,CAAc;AACZrC,MAAAA,IAAI,EAAEyC;AADM,KAAd;AAGH;;AAED3B,EAAAA,SAAS,CAAC0B,GAAD,EAAK;AACV,UAAMC,QAAQ,GAAG,KAAK1C,KAAL,CAAWC,IAA5B;AACA,QAAI0C,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAI,IAAIA,IAAI,CAAC3C,EAAL,KAAYuC,GAAG,CAACA,GAAJ,CAAQvC,EAA1C,CAAlB;AACA,QAAI4C,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwBL,WAAW,CAACzC,EAApC,CAAtB;AAEA,UAAMC,QAAQ,GAAG2C,eAAe,CAACpB,aAAhB,CAA8B,gBAA9B,EAAgDC,KAAjE;AACA,UAAMvB,IAAI,GAAG0C,eAAe,CAACpB,aAAhB,CAA8B,YAA9B,EAA4CC,KAAzD;AACA,UAAMrB,WAAW,GAAGwC,eAAe,CAACpB,aAAhB,CAA8B,oBAA9B,EAAoDC,KAAxE;AACA,UAAMpB,SAAS,GAAGuC,eAAe,CAACpB,aAAhB,CAA8B,kBAA9B,EAAkDC,KAApE;;AAEA,SAAI,IAAIK,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAGW,WAAW,CAACtC,gBAAZ,CAA6ByB,MAA/C,EAAuDE,CAAC,EAAxD,EAA2D;AACvD,YAAMC,QAAQ,GAAGa,eAAe,CAACpB,aAAhB,CAA8B,wBAA9B,CAAjB;AACA,UAAIuB,sBAAsB,GAAGhB,QAAQ,CAACJ,UAAT,CAAoBG,CAApB,EAAuBI,UAAvB,CAAkCT,KAA/D;AACAgB,MAAAA,WAAW,CAACtC,gBAAZ,CAA6B2B,CAA7B,IAAkCiB,sBAAlC;AACH;;AAEDN,IAAAA,WAAW,CAACxC,QAAZ,GAAuBA,QAAvB;AACAwC,IAAAA,WAAW,CAACvC,IAAZ,GAAmBA,IAAnB;AACAuC,IAAAA,WAAW,CAACrC,WAAZ,GAA0BA,WAA1B;AACAqC,IAAAA,WAAW,CAACpC,SAAZ,GAAwBA,SAAxB;AACAoC,IAAAA,WAAW,CAACnC,QAAZ,GAAuB,CAACmC,WAAW,CAACnC,QAApC;AAEA,SAAK8B,QAAL,CAAc;AACZrC,MAAAA,IAAI,EAAEyC;AADM,KAAd;AAGH;;AAED1B,EAAAA,MAAM,GAAE;AACJ,SAAKsB,QAAL,CAAc;AACV1B,MAAAA,UAAU,EAAE,CAAC,KAAKZ,KAAL,CAAWY;AADd,KAAd;AAGH;;AAEDK,EAAAA,SAAS,CAACK,CAAD,EAAGmB,GAAH,EAAO;AACZ,UAAMC,QAAQ,GAAG,KAAK1C,KAAL,CAAWC,IAA5B;AACA,UAAMiD,aAAa,GAAGR,QAAQ,CAACS,SAAT,CAAmBC,OAAO,IAAIA,OAAO,CAAClD,EAAR,KAAeuC,GAAG,CAACvC,EAAjD,CAAtB;AAEAwC,IAAAA,QAAQ,CAACW,MAAT,CAAgBH,aAAhB,EAA8B,CAA9B;AAEA,SAAKZ,QAAL,CAAc;AACVrC,MAAAA,IAAI,EAAEyC;AADI,KAAd;AAGH;;AAEDvB,EAAAA,iBAAiB,CAACG,CAAD,EAAGmB,GAAH,EAAO;AACpB,UAAMa,aAAa,GAAGhC,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,YAAjB,EAA+B8B,SAA/B,CAAyCC,QAAzC,CAAkD,SAAlD,CAAtB;;AAEA,QAAGF,aAAH,EAAiB;AACb,YAAMG,kBAAkB,GAAG,KAAKzD,KAAL,CAAWS,cAAtC;AACA,YAAMiD,kBAAkB,GAAGpC,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,UAAjB,CAA3B;AACA,YAAMQ,QAAQ,GAAGyB,kBAAkB,CAAChC,aAAnB,CAAiC,wBAAjC,CAAjB;AACA,YAAMiC,OAAO,GAAG,8BAAhB;;AAEA,WAAI,IAAI3B,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAGyB,kBAAkB,CAACpD,gBAAnB,CAAoCyB,MAAtD,EAA8DE,CAAC,EAA/D,EAAkE;AAC9D,YAAIiB,sBAAsB,GAAGhB,QAAQ,CAACJ,UAAT,CAAoBG,CAApB,EAAuBI,UAAvB,CAAkCT,KAA/D;AACA8B,QAAAA,kBAAkB,CAACpD,gBAAnB,CAAoC2B,CAApC,IAAyCiB,sBAAzC;AACH;;AAEDQ,MAAAA,kBAAkB,CAACpD,gBAAnB,GAAsC,CAAC,GAAG,KAAKL,KAAL,CAAWS,cAAX,CAA0BJ,gBAA9B,EAAgDsD,OAAhD,CAAtC;AAEA,WAAKrB,QAAL,CAAc;AACV7B,QAAAA,cAAc,EAAEgD;AADN,OAAd;AAGH,KAhBD,MAgBO;AACH,YAAMf,QAAQ,GAAG,KAAK1C,KAAL,CAAWC,IAA5B;AACA,YAAM0C,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAI,IAAIA,IAAI,CAAC3C,EAAL,KAAYuC,GAAG,CAACvC,EAAtC,CAApB;AACA,YAAM4C,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwBP,GAAG,CAACvC,EAA5B,CAAxB;AACA,YAAM+B,QAAQ,GAAGa,eAAe,CAACpB,aAAhB,CAA8B,wBAA9B,CAAjB;AACA,YAAMiC,OAAO,GAAG,8BAAhB;;AAGA,WAAI,IAAI3B,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAGW,WAAW,CAACtC,gBAAZ,CAA6ByB,MAA/C,EAAuDE,CAAC,EAAxD,EAA2D;AACvD,YAAIiB,sBAAsB,GAAGhB,QAAQ,CAACJ,UAAT,CAAoBG,CAApB,EAAuBI,UAAvB,CAAkCT,KAA/D;AACAgB,QAAAA,WAAW,CAACtC,gBAAZ,CAA6B2B,CAA7B,IAAkCiB,sBAAlC;AACH;;AAEDN,MAAAA,WAAW,CAACtC,gBAAZ,CAA6BgC,IAA7B,CAAkCsB,OAAlC;AAEA,WAAKrB,QAAL,CAAc;AACVrC,QAAAA,IAAI,EAAEyC;AADI,OAAd;AAGH;AACJ;;AAEDtB,EAAAA,oBAAoB,CAACE,CAAD,EAAGmB,GAAH,EAAO;AACvB,UAAMa,aAAa,GAAGhC,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,YAAjB,EAA+B8B,SAA/B,CAAyCC,QAAzC,CAAkD,SAAlD,CAAtB;;AAEA,QAAGF,aAAH,EAAiB;AACb,YAAMG,kBAAkB,GAAG,KAAKzD,KAAL,CAAWS,cAAtC;AACA,YAAMmD,iBAAiB,GAAGtC,CAAC,CAACE,MAAF,CAASU,UAAT,CAAoBhC,EAA9C;AACA,YAAM2D,oBAAoB,GAAGvC,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,wBAAjB,CAA7B;AACA,YAAMqC,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAWH,oBAAoB,CAAChC,UAAhC,CAAtB;AACA,YAAMoC,kBAAkB,GAAGH,aAAa,CAACX,SAAd,CAAwBe,IAAI,IAAIA,IAAI,CAAChE,EAAL,KAAY0D,iBAA5C,CAA3B;;AAEA,WAAI,IAAI5B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGyB,kBAAkB,CAACpD,gBAAnB,CAAoCyB,MAAvD,EAA+DE,CAAC,EAAhE,EAAmE;AAC/D,YAAIiB,sBAAsB,GAAGY,oBAAoB,CAAChC,UAArB,CAAgCG,CAAhC,EAAmCI,UAAnC,CAA8CT,KAA3E;AACA8B,QAAAA,kBAAkB,CAACpD,gBAAnB,CAAoC2B,CAApC,IAAyCiB,sBAAzC;AACH;;AAAA;AAEDQ,MAAAA,kBAAkB,CAACpD,gBAAnB,CAAoCgD,MAApC,CAA2CY,kBAA3C,EAA8D,CAA9D;AAEA,WAAK3B,QAAL,CAAc;AACV7B,QAAAA,cAAc,EAAEgD;AADN,OAAd;AAGH,KAjBD,MAiBO;AACH,YAAMf,QAAQ,GAAG,KAAK1C,KAAL,CAAWC,IAA5B;AACA,YAAM0C,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAI,IAAIA,IAAI,CAAC3C,EAAL,KAAYuC,GAAG,CAACvC,EAAtC,CAApB;AACA,YAAMiE,cAAc,GAAG7C,CAAC,CAACE,MAAF,CAASU,UAAT,CAAoBhC,EAA3C;AACA,YAAM2D,oBAAoB,GAAGvC,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,wBAAjB,CAA7B;AACA,YAAMqC,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAWH,oBAAoB,CAAChC,UAAhC,CAAtB;AACA,YAAMoC,kBAAkB,GAAGH,aAAa,CAACX,SAAd,CAAwBe,IAAI,IAAIA,IAAI,CAAChE,EAAL,KAAYiE,cAA5C,CAA3B;;AAEA,WAAI,IAAInC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGW,WAAW,CAACtC,gBAAZ,CAA6ByB,MAAhD,EAAwDE,CAAC,EAAzD,EAA4D;AACxD,YAAIiB,sBAAsB,GAAGY,oBAAoB,CAAChC,UAArB,CAAgCG,CAAhC,EAAmCI,UAAnC,CAA8CT,KAA3E;AACAgB,QAAAA,WAAW,CAACtC,gBAAZ,CAA6B2B,CAA7B,IAAkCiB,sBAAlC;AACH;;AAAA;AAEDN,MAAAA,WAAW,CAACtC,gBAAZ,CAA6BgD,MAA7B,CAAoCY,kBAApC,EAAuD,CAAvD;AAEA,WAAK3B,QAAL,CAAc;AACVrC,QAAAA,IAAI,EAAEyC;AADI,OAAd;AAGH;AAEJ;;AAEDrB,EAAAA,oBAAoB,GAAE;AAClB,UAAM+C,oBAAoB,GAAG,CAAC,KAAKpE,KAAL,CAAWW,cAAzC;AACA,UAAM0D,aAAa,GAAGtB,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAtB;AACA,UAAMsB,iBAAiB,GAAG,4BAA1B;;AACA,QAAGF,oBAAoB,KAAK,IAA5B,EAAiC;AAC7BC,MAAAA,aAAa,CAACE,SAAd,GAA0B,UAA1B;AACAF,MAAAA,aAAa,CAACd,SAAd,CAAwBiB,GAAxB,CAA4B,mBAA5B;AACH,KAHD,MAGO;AACHH,MAAAA,aAAa,CAACE,SAAd,GAA0BD,iBAA1B;AACAD,MAAAA,aAAa,CAACd,SAAd,CAAwBkB,MAAxB,CAA+B,mBAA/B;AACH;;AAED,UAAMC,YAAY,GAAG3B,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAArB;AACA0B,IAAAA,YAAY,CAACnB,SAAb,CAAuBoB,MAAvB,CAA8B,iBAA9B;AAEA,SAAKrC,QAAL,CAAc;AACV3B,MAAAA,cAAc,EAAEyD;AADN,KAAd;AAKH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA,+CACe,QAAC,KAAD;AAAO,UAAA,MAAM,EAAC,cAAd;AAAmB,UAAA,KAAK,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADf,eAEI;AAAQ,UAAA,EAAE,EAAC,UAAX;AAAsB,UAAA,OAAO,EAAE,KAAKvD,oBAApC;AAA0D,UAAA,SAAS,EAAC,aAApE;AAAA,iCAAkF;AAAG,YAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AAAlF;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAQ,QAAA,EAAE,EAAC,SAAX;AAAqB,QAAA,OAAO,EAAE,KAAKL,MAAnC;AAA2C,QAAA,SAAS,EAAC,2DAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,EAQQ,KAAKhB,KAAL,CAAWY,UAAX,iBAEA;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACI;AAAA,kCACI;AAAO,YAAA,GAAG,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC,WAA7B;AAAyC,YAAA,IAAI,EAAC,MAA9C;AAAqD,YAAA,WAAW,EAAC;AAAjE;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAO,UAAA,GAAG,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,SAAS,EAAC,eAAjC;AAAiD,UAAA,IAAI,EAAC,MAAtD;AAA6D,UAAA,WAAW,EAAC;AAAzE;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA,kCACI;AAAO,YAAA,SAAS,EAAC,mBAAjB;AAAqC,YAAA,IAAI,EAAC,QAA1C;AAAmD,YAAA,GAAG,EAAC,MAAvD;AAA8D,YAAA,GAAG,EAAC,MAAlE;AAAyE,YAAA,IAAI,EAAC,GAA9E;AAAkF,YAAA,WAAW,EAAC;AAA9F;AAAA;AAAA;AAAA;AAAA,kBADJ,oBAGI;AAAO,YAAA,SAAS,EAAC,iBAAjB;AAAmC,YAAA,IAAI,EAAC,QAAxC;AAAiD,YAAA,GAAG,EAAC,MAArD;AAA4D,YAAA,GAAG,EAAC,MAAhE;AAAuE,YAAA,IAAI,EAAC,GAA5E;AAAgF,YAAA,WAAW,EAAC;AAA5F;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAYI;AAAA,kCACI;AAAI,YAAA,SAAS,EAAC,uBAAd;AAAA,sBAEQ,KAAKZ,KAAL,CAAWS,cAAX,CAA0BJ,gBAA1B,CAA2CwE,GAA3C,CACCC,cAAD,iBACA;AAAmB,cAAA,EAAE,EAAEjF,MAAM,EAA7B;AAAA,sCACI;AAAO,gBAAA,EAAE,EAAEA,MAAM,EAAjB;AAAqB,gBAAA,SAAS,EAAC,qBAA/B;AAAqD,gBAAA,IAAI,EAAC,MAA1D;AAAiE,gBAAA,WAAW,EAAEiF;AAA9E;AAAA;AAAA;AAAA;AAAA,sBADJ,oBACqG;AAAG,gBAAA,OAAO,EAAGxD,CAAD,IAAO,KAAKF,oBAAL,CAA0BE,CAA1B,CAAnB;AAAiD,gBAAA,SAAS,EAAC;AAA3D;AAAA;AAAA;AAAA;AAAA,sBADrG;AAAA,eAASzB,MAAM,EAAf;AAAA;AAAA;AAAA;AAAA,oBAFA;AAFR;AAAA;AAAA;AAAA;AAAA,kBADJ,eAWI;AAAQ,YAAA,OAAO,EAAGyB,CAAD,IAAO,KAAKH,iBAAL,CAAuBG,CAAvB,CAAxB;AAAmD,YAAA,SAAS,EAAC,wBAA7D;AAAA,oCAAsF;AAAG,cAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,oBAAtF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZJ,eA0BI;AAAQ,UAAA,OAAO,EAAGA,CAAD,IAAO,KAAKJ,YAAL,CAAkBI,CAAlB,CAAxB;AAA8C,UAAA,SAAS,EAAC,0BAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAVR,EAwCK,KAAKtB,KAAL,CAAWC,IAAX,CAAgB4E,GAAhB,CACIpC,GAAD,IAAS;AAAC,YAAGA,GAAG,CAACjC,QAAJ,KAAiB,IAApB,EAAyB;AAC/B,8BACI;AAAK,YAAA,EAAE,EAAEiC,GAAG,CAACvC,EAAb;AAAiB,YAAA,SAAS,EAAC,WAA3B;AAAA,oCACI;AAAA,sCACI;AAAO,gBAAA,GAAG,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAO,gBAAA,IAAI,EAAC,MAAZ;AAAmB,gBAAA,SAAS,EAAC,WAA7B;AAAyC,gBAAA,IAAI,EAAC,MAA9C;AAAqD,gBAAA,YAAY,EAAEuC,GAAG,CAACrC;AAAvE;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAKI;AAAO,cAAA,GAAG,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAO,cAAA,SAAS,EAAC,eAAjB;AAAiC,cAAA,IAAI,EAAC,MAAtC;AAA6C,cAAA,YAAY,EAAEqC,GAAG,CAACtC;AAA/D;AAAA;AAAA;AAAA;AAAA,oBANJ,eAQI;AAAM,cAAA,SAAS,EAAC,aAAhB;AAAA,sCACI;AAAO,gBAAA,SAAS,EAAC,mBAAjB;AAAqC,gBAAA,IAAI,EAAC,QAA1C;AAAmD,gBAAA,GAAG,EAAC,MAAvD;AAA8D,gBAAA,GAAG,EAAC,MAAlE;AAAyE,gBAAA,IAAI,EAAC,GAA9E;AAAkF,gBAAA,YAAY,EAAEsC,GAAG,CAACnC;AAApG;AAAA;AAAA;AAAA;AAAA,sBADJ,oBAGI;AAAO,gBAAA,SAAS,EAAC,iBAAjB;AAAmC,gBAAA,IAAI,EAAC,QAAxC;AAAiD,gBAAA,GAAG,EAAC,MAArD;AAA4D,gBAAA,GAAG,EAAC,MAAhE;AAAuE,gBAAA,IAAI,EAAC,GAA5E;AAAgF,gBAAA,YAAY,EAAEmC,GAAG,CAAClC;AAAlG;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ,eAaI;AAAA,sCACI;AAAI,gBAAA,SAAS,EAAC,uBAAd;AAAA,0BAEQkC,GAAG,CAACpC,gBAAJ,CAAqBwE,GAArB,CACCC,cAAD,iBACA;AAAmB,kBAAA,EAAE,EAAEjF,MAAM,EAA7B;AAAA,0CACI;AAAO,oBAAA,EAAE,EAAEA,MAAM,EAAjB;AAAqB,oBAAA,SAAS,EAAC,qBAA/B;AAAqD,oBAAA,IAAI,EAAC,MAA1D;AAAiE,oBAAA,YAAY,EAAEiF;AAA/E;AAAA;AAAA;AAAA;AAAA,0BADJ,oBACsG;AAAG,oBAAA,OAAO,EAAGxD,CAAD,IAAO,KAAKF,oBAAL,CAA0BE,CAA1B,EAA4BmB,GAA5B,CAAnB;AAAqD,oBAAA,SAAS,EAAC;AAA/D;AAAA;AAAA;AAAA;AAAA,0BADtG;AAAA,mBAAS5C,MAAM,EAAf;AAAA;AAAA;AAAA;AAAA,wBAFA;AAFR;AAAA;AAAA;AAAA;AAAA,sBADJ,eAWI;AAAQ,gBAAA,OAAO,EAAGyB,CAAD,IAAO,KAAKH,iBAAL,CAAuBG,CAAvB,EAAyBmB,GAAzB,CAAxB;AAAuD,gBAAA,SAAS,EAAC,wBAAjE;AAAA,wCAA0F;AAAG,kBAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,wBAA1F;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbJ,eA0BI;AAAA,sCACI;AAAQ,gBAAA,OAAO,EAAE,MAAM,KAAK1B,SAAL,CAAe;AAAC0B,kBAAAA;AAAD,iBAAf,CAAvB;AAA8C,gBAAA,SAAS,EAAC,0BAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAQ,gBAAA,OAAO,EAAGnB,CAAD,IAAO,KAAKL,SAAL,CAAeK,CAAf,EAAiBmB,GAAjB,CAAxB;AAA+C,gBAAA,SAAS,EAAC,oCAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAiCH,SAlCS,MAkCH,IAAG,KAAKzC,KAAL,CAAWW,cAAX,KAA8B,IAAjC,EAAuC;AAC1C,8BACI;AAAA,oCACI;AAAA,yBACK8B,GAAG,CAACrC,IADT,eAEI;AAAQ,gBAAA,OAAO,EAAE,MAAM,KAAKS,OAAL,CAAa;AAAC4B,kBAAAA;AAAD,iBAAb,CAAvB;AAA4C,gBAAA,SAAS,EAAC,aAAtD;AAAA,uCAAoE;AAAG,kBAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AAApE;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAKI;AAAA,yBACKA,GAAG,CAACtC,QADT,eAEI;AAAM,gBAAA,SAAS,EAAC,aAAhB;AAAA,2BACKsC,GAAG,CAACnC,WADT,SACyBmC,GAAG,CAAClC,SAD7B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAYI;AAAA,wBACKkC,GAAG,CAACpC,gBAAJ,CAAqBwE,GAArB,CACIC,cAAD,iBACA;AAAmB,gBAAA,EAAE,EAAEjF,MAAM,EAA7B;AAAA,0BAAkCiF;AAAlC,iBAASjF,MAAM,EAAf;AAAA;AAAA;AAAA;AAAA,sBAFH;AADL;AAAA;AAAA;AAAA;AAAA,oBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAqBH,SAtBM,MAsBA;AACH,8BACI;AAAA,oCACI;AAAA,sCACI;AAAM,gBAAA,SAAS,EAAC,UAAhB;AAAA,0BAA4B4C,GAAG,CAACrC;AAAhC;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAQ,gBAAA,OAAO,EAAE,MAAM,KAAKS,OAAL,CAAa;AAAC4B,kBAAAA;AAAD,iBAAb,CAAvB;AAA4C,gBAAA,SAAS,EAAC,6BAAtD;AAAA,uCAAoF;AAAG,kBAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AAApF;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAKI;AAAA,yBACKA,GAAG,CAACtC,QADT,eAEI;AAAM,gBAAA,SAAS,EAAC,aAAhB;AAAA,2BACKsC,GAAG,CAACnC,WADT,SACyBmC,GAAG,CAAClC,SAD7B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAYI;AAAA,wBACKkC,GAAG,CAACpC,gBAAJ,CAAqBwE,GAArB,CACIC,cAAD,iBACA;AAAmB,gBAAA,EAAE,EAAEjF,MAAM,EAA7B;AAAA,0BAAkCiF;AAAlC,iBAASjF,MAAM,EAAf;AAAA;AAAA;AAAA;AAAA,sBAFH;AADL;AAAA;AAAA;AAAA;AAAA,oBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAqBH;AACJ,OAhFA,CAxCL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA+HH;;AA3X8B;;AA8XjC,eAAeC,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\nimport uniqid from \"uniqid\";\n\nclass Experience extends Component {\n    constructor() {\n        super()\n        this.state = {\n            jobs: [\n                {\n                    id: uniqid(),\n                    employer: \"Bob's Burgers\",\n                    role: \"Chef, Owner and Operator\",\n                    responsibilities: [\n                        \"Make the burgers\",\n                        \"Serve the burgers\",\n                        \"Clean up afterwards\",\n                    ],\n                    yearStarted: 2011,\n                    yearEnded: 2020,\n                    editFlag: false,\n                },\n                {\n                    id: uniqid(),\n                    employer: \"Big Bob's Diner\",\n                    role: \"Cook and Server\",\n                    responsibilities: [\n                        \"Take orders\",\n                        \"Cook the orders\",\n                        \"Serve the orders\",\n                    ],\n                    yearStarted: 2001,\n                    yearEnded: 2010,\n                    editFlag: false,\n                },\n            ],\n            placeholderJob: {\n                responsibilities: [\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                ],\n            },\n            defaultJob: {\n                responsibilities: [\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                ],\n            },\n            activeEditFlag: false,\n            addJobFlag: false,\n        }\n\n        this.editJob = this.editJob.bind(this);\n        this.updateJob = this.updateJob.bind(this);\n        this.addJob = this.addJob.bind(this);\n        this.removeJob = this.removeJob.bind(this);\n        this.submitNewJob = this.submitNewJob.bind(this);\n        this.addResponsibility = this.addResponsibility.bind(this);\n        this.removeResponsibility = this.removeResponsibility.bind(this);\n        this.toggleEditVisibility = this.toggleEditVisibility.bind(this);\n    }\n\n    submitNewJob(e){\n        const newJobNode = e.target.closest(\".new-job\");\n\n        const employer = newJobNode.querySelector(\".edit-employer\").value;\n        const role = newJobNode.querySelector(\".edit-role\").value;\n        const yearStarted = newJobNode.querySelector(\".edit-year-started\").value;\n        const yearEnded = newJobNode.querySelector(\".edit-year-ended\").value;\n        const newJobResponsibilityLength = newJobNode.querySelector(\".edit-responsibilities\").childNodes.length;\n\n        const newJob = {\n            id: uniqid(),\n            employer: employer,\n            role: role,\n            responsibilities: [],\n            yearStarted: yearStarted,\n            yearEnded: yearEnded,\n            editFlag: false,\n        }\n\n        for(let i = 0; i < newJobResponsibilityLength; i++){\n            const children = newJobNode.parentNode.querySelector(\".edit-responsibilities\");\n            let newJobResponsibility = children.childNodes[i].firstChild.value;\n            newJob.responsibilities.push(newJobResponsibility);\n        }\n  \n        this.setState({\n            // jobs: [...this.state.jobs, newJob],\n            jobs: [newJob, ...this.state.jobs],\n            addJobFlag: !this.state.addJobFlag,\n            placeholderJob: this.state.defaultJob,\n        })\n        console.log(this.state.jobs)\n    }\n\n    editJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        selectedJob.editFlag = !selectedJob.editFlag;\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    updateJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        let selectedJobNode = document.getElementById(selectedJob.id)\n\n        const employer = selectedJobNode.querySelector(\".edit-employer\").value;\n        const role = selectedJobNode.querySelector(\".edit-role\").value;\n        const yearStarted = selectedJobNode.querySelector(\".edit-year-started\").value;\n        const yearEnded = selectedJobNode.querySelector(\".edit-year-ended\").value;\n\n        for(let i =0; i < selectedJob.responsibilities.length; i++){\n            const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n            let selectedResponsibility = children.childNodes[i].firstChild.value;\n            selectedJob.responsibilities[i] = selectedResponsibility;\n        }\n\n        selectedJob.employer = employer;\n        selectedJob.role = role;\n        selectedJob.yearStarted = yearStarted;\n        selectedJob.yearEnded = yearEnded;\n        selectedJob.editFlag = !selectedJob.editFlag;\n\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    addJob(){\n        this.setState({\n            addJobFlag: !this.state.addJobFlag,\n        })\n    }\n\n    removeJob(e,job){\n        const jobsCopy = this.state.jobs;\n        const jobsCopyIndex = jobsCopy.findIndex(jobCopy => jobCopy.id === job.id);\n\n        jobsCopy.splice(jobsCopyIndex,1);\n\n        this.setState({\n            jobs: jobsCopy,\n        })\n    }\n\n    addResponsibility(e,job){\n        const checkIfNewJob = e.target.closest(\".job-block\").classList.contains(\"new-job\");\n\n        if(checkIfNewJob){\n            const placeholderJobCopy = this.state.placeholderJob;\n            const placeholderJobNode = e.target.closest(\".new-job\");\n            const children = placeholderJobNode.querySelector(\".edit-responsibilities\");\n            const newResp = \"describe responsibility here\";\n\n            for(let i =0; i < placeholderJobCopy.responsibilities.length; i++){\n                let selectedResponsibility = children.childNodes[i].firstChild.value;\n                placeholderJobCopy.responsibilities[i] = selectedResponsibility;\n            }\n\n            placeholderJobCopy.responsibilities = [...this.state.placeholderJob.responsibilities, newResp]\n    \n            this.setState({\n                placeholderJob: placeholderJobCopy\n            })\n        } else {\n            const jobsCopy = this.state.jobs;\n            const selectedJob = jobsCopy.find(blah => blah.id === job.id);\n            const selectedJobNode = document.getElementById(job.id);\n            const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n            const newResp = \"describe responsibility here\";\n            \n\n            for(let i =0; i < selectedJob.responsibilities.length; i++){\n                let selectedResponsibility = children.childNodes[i].firstChild.value;\n                selectedJob.responsibilities[i] = selectedResponsibility;\n            }\n\n            selectedJob.responsibilities.push(newResp);\n    \n            this.setState({\n                jobs: jobsCopy,\n            })\n        }\n    }\n\n    removeResponsibility(e,job){\n        const checkIfNewJob = e.target.closest(\".job-block\").classList.contains(\"new-job\");\n\n        if(checkIfNewJob){\n            const placeholderJobCopy = this.state.placeholderJob;\n            const placeholderNodeID = e.target.parentNode.id;\n            const responsibilitiesNode = e.target.closest(\".edit-responsibilities\");\n            const childrenArray = Array.from(responsibilitiesNode.childNodes);\n            const childrenArrayIndex = childrenArray.findIndex(node => node.id === placeholderNodeID);\n\n            for(let i = 0; i < placeholderJobCopy.responsibilities.length; i++){\n                let selectedResponsibility = responsibilitiesNode.childNodes[i].firstChild.value;\n                placeholderJobCopy.responsibilities[i] = selectedResponsibility;\n            };\n\n            placeholderJobCopy.responsibilities.splice(childrenArrayIndex,1);\n    \n            this.setState({\n                placeholderJob: placeholderJobCopy\n            })\n        } else {\n            const jobsCopy = this.state.jobs;\n            const selectedJob = jobsCopy.find(blah => blah.id === job.id);\n            const selectedNodeID = e.target.parentNode.id;\n            const responsibilitiesNode = e.target.closest(\".edit-responsibilities\");\n            const childrenArray = Array.from(responsibilitiesNode.childNodes);\n            const childrenArrayIndex = childrenArray.findIndex(node => node.id === selectedNodeID);\n\n            for(let i = 0; i < selectedJob.responsibilities.length; i++){\n                let selectedResponsibility = responsibilitiesNode.childNodes[i].firstChild.value;\n                selectedJob.responsibilities[i] = selectedResponsibility;\n            };\n\n            selectedJob.responsibilities.splice(childrenArrayIndex,1);\n\n            this.setState({\n                jobs: jobsCopy,\n            })\n        }\n\n    }\n\n    toggleEditVisibility(){\n        const updateActiveEditFlag = !this.state.activeEditFlag;\n        const editJobButton = document.getElementById(\"edit-job\");\n        const editJobButtonHTML = \"<i class='fas fa-cog'></i>\"\n        if(updateActiveEditFlag === true){\n            editJobButton.innerHTML = \"all done\";\n            editJobButton.classList.add(\"btn-green-inverse\");\n        } else {\n            editJobButton.innerHTML = editJobButtonHTML;\n            editJobButton.classList.remove(\"btn-green-inverse\");\n        }\n        \n        const addJobButton = document.getElementById(\"add-job\");\n        addJobButton.classList.toggle(\"edit-job-hidden\");\n\n        this.setState({\n            activeEditFlag: updateActiveEditFlag,\n        })\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Experience <Emoji symbol=\"💼\" label=\"briefcase\" />\n                    <button id=\"edit-job\" onClick={this.toggleEditVisibility} className=\"float-right\"><i class=\"fas fa-cog\"></i></button>\n                </h1>\n                <button id=\"add-job\" onClick={this.addJob} className=\" edit-job-toggle edit-job-hidden btn-green btn-add-margin\">add job</button>\n\n                {\n                    this.state.addJobFlag &&\n\n                    <div className=\"job-block new-job\">\n                        <div>\n                            <label for=\"role\">role: </label>\n                            <input name=\"role\" className=\"edit-role\" type=\"text\" placeholder=\"what was your job title?\"/>\n                        </div>\n                        <label for=\"employer\">employer: </label>\n                        <input name=\"employer\" className=\"edit-employer\" type=\"text\" placeholder=\"who did you work for?\" />\n                        <span className=\"float-right\">\n                            <input className=\"edit-year-started\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" placeholder=\"2020\" />\n                            -\n                            <input className=\"edit-year-ended\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" placeholder=\"2020\" />\n                        </span>\n                        <div>\n                            <ul className=\"edit-responsibilities\">\n                                {\n                                    this.state.placeholderJob.responsibilities.map(\n                                    (responsibility) => \n                                    <li key={uniqid()} id={uniqid()}>\n                                        <input id={uniqid()} className=\"edit-responsibility\" type=\"text\" placeholder={responsibility} /> <i onClick={(e) => this.removeResponsibility(e)} className=\"fas fa-times\"></i>\n                                    </li>\n                                    )\n                                }\n                            </ul>\n                            <button onClick={(e) => this.addResponsibility(e)} className=\"btn-add-responsibility\"><i class=\"fas fa-plus\"></i> add line item</button>\n                        </div>\n\n                        <button onClick={(e) => this.submitNewJob(e)} className=\"btn-green btn-add-margin\">all done</button>\n                    </div>\n                }\n\n                {this.state.jobs.map(\n                    (job) => {if(job.editFlag === true){\n                        return (\n                            <div id={job.id} className=\"job-block\">\n                                <div>\n                                    <label for=\"role\">role: </label>\n                                    <input name=\"role\" className=\"edit-role\" type=\"text\" defaultValue={job.role} />\n                                </div>\n                                <label for=\"employer\">employer: </label>\n                                <input className=\"edit-employer\" type=\"text\" defaultValue={job.employer} />\n                                \n                                <span className=\"float-right\">\n                                    <input className=\"edit-year-started\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={job.yearStarted} />\n                                    -\n                                    <input className=\"edit-year-ended\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={job.yearEnded} />\n                                </span>\n                                <div>\n                                    <ul className=\"edit-responsibilities\">\n                                        {\n                                            job.responsibilities.map(\n                                            (responsibility) => \n                                            <li key={uniqid()} id={uniqid()}>\n                                                <input id={uniqid()} className=\"edit-responsibility\" type=\"text\" defaultValue={responsibility} /> <i onClick={(e) => this.removeResponsibility(e,job)} className=\"btn-dimgray fas fa-times\"></i>\n                                            </li>\n                                            )\n                                        }\n                                    </ul>\n                                    <button onClick={(e) => this.addResponsibility(e,job)} className=\"btn-add-responsibility\"><i class=\"fas fa-plus\"></i> add line item</button>\n                                </div>\n                                <div>\n                                    <button onClick={() => this.updateJob({job})} className=\"btn-green btn-add-margin\">all done</button>\n                                    <button onClick={(e) => this.removeJob(e,job)} className=\"btn-red btn-add-margin float-right\">delete</button>\n                                </div>\n                            </div>\n                        )\n                    } else if(this.state.activeEditFlag === true) {\n                        return (\n                            <div>\n                                <div>\n                                    {job.role}\n                                    <button onClick={() => this.editJob({job})} className=\"float-right\"><i class=\"fas fa-cog\"></i></button>\n                                </div>\n                                <div>\n                                    {job.employer}\n                                    <span className=\"float-right\">\n                                        {job.yearStarted} - {job.yearEnded}\n                                    </span>\n                                </div>\n\n                                <ul>\n                                    {job.responsibilities.map(\n                                        (responsibility) => \n                                        <li key={uniqid()} id={uniqid()}>{responsibility}</li>)}\n                                </ul>\n                                \n                            </div>\n                        )\n                    } else {\n                        return (\n                            <div>\n                                <div>\n                                    <span className=\"job-role\">{job.role}</span>\n                                    <button onClick={() => this.editJob({job})} className=\"float-right edit-job-hidden\"><i class=\"fas fa-cog\"></i></button>\n                                </div>\n                                <div>\n                                    {job.employer}\n                                    <span className=\"float-right\">\n                                        {job.yearStarted} - {job.yearEnded}\n                                    </span>\n                                </div>\n\n                                <ul>\n                                    {job.responsibilities.map(\n                                        (responsibility) => \n                                        <li key={uniqid()} id={uniqid()}>{responsibility}</li>)}\n                                </ul>\n                                \n                            </div>\n                        )\n                    }\n                }\n                )\n                \n                }\n            </div>\n        )\n    }\n}\n  \n  export default Experience;"]},"metadata":{},"sourceType":"module"}