{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/owenkraft/the_odin_project/cv-generator-react/cv-generator-react/src/components/Experience.js\";\nimport React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\n\nclass Experience extends Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [{\n        id: 1,\n        employer: \"bugaloo\",\n        role: \"maker\",\n        responsibilities: [\"make stuff\", \"make more stuff\", \"make even more stuff\"],\n        yearStarted: 2014,\n        yearEnded: 2015,\n        editFlag: true\n      }, {\n        id: 2,\n        employer: \"electric\",\n        role: \"shaker\",\n        responsibilities: [\"shake stuff up\", \"shake stuff up more\", \"shake stuff up even more\"],\n        yearStarted: 2015,\n        yearEnded: 2020,\n        editFlag: false\n      }]\n    };\n    this.editJob = this.editJob.bind(this);\n    this.updateJob = this.updateJob.bind(this);\n  }\n\n  editJob(job) {\n    const jobsCopy = this.state.jobs;\n    let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n    selectedJob.editFlag = !selectedJob.editFlag;\n    this.setState({\n      jobs: jobsCopy\n    });\n  }\n\n  updateJob(job) {\n    const jobsCopy = this.state.jobs;\n    let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n    let selectedJobNode = document.getElementById(selectedJob.id);\n    console.log(document.getElementsByClassName(selectedJob.employer)); // const employer = document.getElementsByClassName(selectedJob.employer)[0].value;\n    // const employer = selectedJobNode.parentNode.querySelector(selectedJob.employer).value;\n    // const yearStarted = document.getElementById(\"input-year-started\").value\n    // const yearFinished = document.getElementById(\"input-year-finished\").value\n    // const degreeType = document.getElementById(\"input-degree-type\").value\n    // const areaOfStudy = document.getElementById(\"input-area-of-study\").value\n    // selectedJob.employer = employer;\n\n    selectedJob.editFlag = !selectedJob.editFlag;\n    this.setState({\n      jobs: jobsCopy\n    }); // this.setState({\n    //     school: school,\n    //     yearStarted: yearStarted,\n    //     yearFinished: yearFinished,\n    //     degreeType: degreeType,\n    //     areaOfStudy: areaOfStudy,\n    //     editFlag: !this.state.editFlag,\n    // })\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Experience \", /*#__PURE__*/_jsxDEV(Emoji, {\n          symbol: \"\\uD83D\\uDDFA\\uFE0F\",\n          label: \"world-map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), this.state.jobs.map(job => {\n        if (job.editFlag === true) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: job.id,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: job.employer,\n              className: \"edit-job\",\n              type: \"text\",\n              defaultValue: job.employer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              onClick: () => this.updateJob({\n                job\n              }),\n              className: \"far fa-check-square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [job.employer, \" - \", job.role, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n              onClick: () => this.editJob({\n                job\n              }),\n              className: \"far fa-edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 61\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"float-right\",\n              children: [job.yearStarted, \" - \", job.yearEnded]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: job.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: responsibility\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this);\n        }\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Experience;","map":{"version":3,"sources":["/Users/owenkraft/the_odin_project/cv-generator-react/cv-generator-react/src/components/Experience.js"],"names":["React","Component","Emoji","Experience","constructor","state","jobs","id","employer","role","responsibilities","yearStarted","yearEnded","editFlag","editJob","bind","updateJob","job","jobsCopy","selectedJob","find","blah","setState","selectedJobNode","document","getElementById","console","log","getElementsByClassName","render","map","responsibility"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\n\nclass Experience extends Component {\n    constructor() {\n        super()\n        this.state = {\n            jobs: [\n                {\n                    id: 1,\n                    employer: \"bugaloo\",\n                    role: \"maker\",\n                    responsibilities: [\n                        \"make stuff\",\n                        \"make more stuff\",\n                        \"make even more stuff\",\n                    ],\n                    yearStarted: 2014,\n                    yearEnded: 2015,\n                    editFlag: true,\n                },\n                {\n                    id: 2,\n                    employer: \"electric\",\n                    role: \"shaker\",\n                    responsibilities: [\n                        \"shake stuff up\",\n                        \"shake stuff up more\",\n                        \"shake stuff up even more\",\n                    ],\n                    yearStarted: 2015,\n                    yearEnded: 2020,\n                    editFlag: false,\n                },\n            ]\n        }\n\n        this.editJob = this.editJob.bind(this);\n        this.updateJob = this.updateJob.bind(this);\n    }\n\n    editJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        selectedJob.editFlag = !selectedJob.editFlag;\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    updateJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        let selectedJobNode = document.getElementById(selectedJob.id)\n\n        console.log(document.getElementsByClassName(selectedJob.employer));\n        // const employer = document.getElementsByClassName(selectedJob.employer)[0].value;\n        // const employer = selectedJobNode.parentNode.querySelector(selectedJob.employer).value;\n        // const yearStarted = document.getElementById(\"input-year-started\").value\n        // const yearFinished = document.getElementById(\"input-year-finished\").value\n        // const degreeType = document.getElementById(\"input-degree-type\").value\n        // const areaOfStudy = document.getElementById(\"input-area-of-study\").value\n\n        // selectedJob.employer = employer;\n        selectedJob.editFlag = !selectedJob.editFlag;\n        this.setState({\n          jobs: jobsCopy,\n        })\n\n        // this.setState({\n        //     school: school,\n        //     yearStarted: yearStarted,\n        //     yearFinished: yearFinished,\n        //     degreeType: degreeType,\n        //     areaOfStudy: areaOfStudy,\n        //     editFlag: !this.state.editFlag,\n        // })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Experience <Emoji symbol=\"🗺️\" label=\"world-map\" />\n                </h1>\n                {this.state.jobs.map(\n                    (job) => {if(job.editFlag === true){\n                        return (\n                            <div id={job.id}>\n                                <input className={job.employer} className=\"edit-job\" type=\"text\" defaultValue={job.employer}></input>\n                                {/* <input id=\"test-test\" className=\"edit-job\" type=\"text\" defaultValue={job.employer}></input> */}\n                                <i onClick={() => this.updateJob({job})} className=\"far fa-check-square\"></i>\n                            </div>\n                        )\n                    } else {\n                        return (\n                            <div>\n                                {job.employer} - {job.role} <i onClick={() => this.editJob({job})} className=\"far fa-edit\"></i>\n                                <span className=\"float-right\">\n                                    {job.yearStarted} - {job.yearEnded}\n                                </span>\n                                <ul>\n                                    {job.responsibilities.map(\n                                        (responsibility) => \n                                        <li>{responsibility}</li>)}\n                                </ul>\n                                \n                            </div>\n                        )\n                    }\n                }\n                )\n                \n                }\n            </div>\n        )\n    }\n}\n  \n  export default Experience;"]},"metadata":{},"sourceType":"module"}