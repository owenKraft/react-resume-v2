{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/owenkraft/the_odin_project/cv-generator-react/cv-generator-react/src/components/Experience.js\";\nimport React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\nimport uniqid from \"uniqid\";\n\nclass Experience extends Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [{\n        id: uniqid(),\n        employer: \"bugaloo\",\n        role: \"maker\",\n        responsibilities: [\"make stuff\", \"make more stuff\", \"make even more stuff\"],\n        yearStarted: 2014,\n        yearEnded: 2015,\n        editFlag: false\n      }, {\n        id: uniqid(),\n        employer: \"electric\",\n        role: \"shaker\",\n        responsibilities: [\"shake stuff up\", \"shake stuff up more\", \"shake stuff up even more\"],\n        yearStarted: 2015,\n        yearEnded: 2020,\n        editFlag: false\n      }],\n      activeEdit: false,\n      addJob: false\n    };\n    this.editJob = this.editJob.bind(this);\n    this.updateJob = this.updateJob.bind(this);\n    this.addJob = this.addJob.bind(this);\n  }\n\n  editJob(job) {\n    const jobsCopy = this.state.jobs;\n    let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n    selectedJob.editFlag = !selectedJob.editFlag;\n    this.setState({\n      jobs: jobsCopy\n    });\n  }\n\n  updateJob(job) {\n    const jobsCopy = this.state.jobs;\n    let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n    let selectedJobNode = document.getElementById(selectedJob.id);\n    const employer = selectedJobNode.parentNode.querySelector(\".edit-employer\").value;\n    const role = selectedJobNode.parentNode.querySelector(\".edit-role\").value;\n    const yearStarted = selectedJobNode.parentNode.querySelector(\".edit-year-started\").value;\n    const yearEnded = selectedJobNode.parentNode.querySelector(\".edit-year-ended\").value;\n\n    for (let i = 0; i < selectedJob.responsibilities.length; i++) {\n      const children = selectedJobNode.parentNode.querySelector(\".edit-responsibilities\");\n      let selectedResponsibility = children.childNodes[i].firstChild.value;\n      selectedJob.responsibilities[i] = selectedResponsibility;\n    }\n\n    selectedJob.employer = employer;\n    selectedJob.role = role;\n    selectedJob.yearStarted = yearStarted;\n    selectedJob.yearEnded = yearEnded;\n    selectedJob.editFlag = !selectedJob.editFlag;\n    this.setState({\n      jobs: jobsCopy\n    });\n  }\n\n  addJob() {\n    this.setState({\n      addJob: !this.state.addJob\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Experience \", /*#__PURE__*/_jsxDEV(Emoji, {\n          symbol: \"\\uD83D\\uDDFA\\uFE0F\",\n          label: \"world-map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onclick: this.addJob(),\n          className: \"float-right\",\n          children: \"add job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), this.state.addJob ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"poo poo magoo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"fe fo fi fum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }, this), this.state.jobs.map(job => {\n        if (job.editFlag === true) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: job.id,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"edit-employer\",\n              type: \"text\",\n              defaultValue: job.employer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"edit-role\",\n              type: \"text\",\n              defaultValue: job.role\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"float-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"edit-year-started\",\n                type: \"number\",\n                min: \"1900\",\n                max: \"2099\",\n                step: \"1\",\n                defaultValue: job.yearStarted\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"edit-year-ended\",\n                type: \"number\",\n                min: \"1900\",\n                max: \"2099\",\n                step: \"1\",\n                defaultValue: job.yearEnded\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"edit-responsibilities\",\n              children: job.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: uniqid(),\n                  className: \"edit-responsibility\",\n                  type: \"text\",\n                  defaultValue: responsibility\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 45\n                }, this)\n              }, uniqid(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              onClick: () => this.updateJob({\n                job\n              }),\n              className: \"far fa-check-square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [job.employer, \" - \", job.role, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n              onClick: () => this.editJob({\n                job\n              }),\n              className: \"far fa-edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 61\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"float-right\",\n              children: [job.yearStarted, \" - \", job.yearEnded]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: job.responsibilities.map(responsibility => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: responsibility\n              }, uniqid(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this);\n        }\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Experience;","map":{"version":3,"sources":["/Users/owenkraft/the_odin_project/cv-generator-react/cv-generator-react/src/components/Experience.js"],"names":["React","Component","Emoji","uniqid","Experience","constructor","state","jobs","id","employer","role","responsibilities","yearStarted","yearEnded","editFlag","activeEdit","addJob","editJob","bind","updateJob","job","jobsCopy","selectedJob","find","blah","setState","selectedJobNode","document","getElementById","parentNode","querySelector","value","i","length","children","selectedResponsibility","childNodes","firstChild","render","map","responsibility"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\nimport uniqid from \"uniqid\";\n\nclass Experience extends Component {\n    constructor() {\n        super()\n        this.state = {\n            jobs: [\n                {\n                    id: uniqid(),\n                    employer: \"bugaloo\",\n                    role: \"maker\",\n                    responsibilities: [\n                        \"make stuff\",\n                        \"make more stuff\",\n                        \"make even more stuff\",\n                    ],\n                    yearStarted: 2014,\n                    yearEnded: 2015,\n                    editFlag: false,\n                },\n                {\n                    id: uniqid(),\n                    employer: \"electric\",\n                    role: \"shaker\",\n                    responsibilities: [\n                        \"shake stuff up\",\n                        \"shake stuff up more\",\n                        \"shake stuff up even more\",\n                    ],\n                    yearStarted: 2015,\n                    yearEnded: 2020,\n                    editFlag: false,\n                },\n            ],\n            activeEdit: false,\n            addJob: false,\n        }\n\n        this.editJob = this.editJob.bind(this);\n        this.updateJob = this.updateJob.bind(this);\n        this.addJob = this.addJob.bind(this);\n    }\n\n    editJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        selectedJob.editFlag = !selectedJob.editFlag;\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    updateJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        let selectedJobNode = document.getElementById(selectedJob.id)\n\n        const employer = selectedJobNode.parentNode.querySelector(\".edit-employer\").value;\n        const role = selectedJobNode.parentNode.querySelector(\".edit-role\").value;\n        const yearStarted = selectedJobNode.parentNode.querySelector(\".edit-year-started\").value;\n        const yearEnded = selectedJobNode.parentNode.querySelector(\".edit-year-ended\").value;\n\n        for(let i =0; i < selectedJob.responsibilities.length; i++){\n            const children = selectedJobNode.parentNode.querySelector(\".edit-responsibilities\");\n            let selectedResponsibility = children.childNodes[i].firstChild.value;\n            selectedJob.responsibilities[i] = selectedResponsibility;\n        }\n\n        selectedJob.employer = employer;\n        selectedJob.role = role;\n        selectedJob.yearStarted = yearStarted;\n        selectedJob.yearEnded = yearEnded;\n        selectedJob.editFlag = !selectedJob.editFlag;\n\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    addJob(){\n        this.setState({\n            addJob: !this.state.addJob,\n        })\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Experience <Emoji symbol=\"🗺️\" label=\"world-map\" />\n                    <button onclick={this.addJob()}className=\"float-right\">add job</button>\n                </h1>\n\n                {this.state.addJob\n                ? <h2>poo poo magoo</h2>\n                : <h2>fe fo fi fum</h2>}\n\n                {this.state.jobs.map(\n                    (job) => {if(job.editFlag === true){\n                        return (\n                            <div id={job.id}>\n                                <input className=\"edit-employer\" type=\"text\" defaultValue={job.employer} />\n                                <input className=\"edit-role\" type=\"text\" defaultValue={job.role} />\n                                <span className=\"float-right\">\n                                    <input className=\"edit-year-started\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={job.yearStarted} />\n                                    <input className=\"edit-year-ended\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={job.yearEnded} />\n                                </span>\n                                <ul className=\"edit-responsibilities\">\n                                    {job.responsibilities.map(\n                                        (responsibility) => \n                                        <li key={uniqid()}>\n                                            <input id={uniqid()} className=\"edit-responsibility\" type=\"text\" defaultValue={responsibility} />\n                                        </li>)}\n                                </ul>\n                                <i onClick={() => this.updateJob({job})} className=\"far fa-check-square\"></i>\n                            </div>\n                        )\n                    } else {\n                        return (\n                            <div>\n                                {job.employer} - {job.role} <i onClick={() => this.editJob({job})} className=\"far fa-edit\"></i>\n                                <span className=\"float-right\">\n                                    {job.yearStarted} - {job.yearEnded}\n                                </span>\n                                <ul>\n                                    {job.responsibilities.map(\n                                        (responsibility) => \n                                        <li key={uniqid()}>{responsibility}</li>)}\n                                </ul>\n                                \n                            </div>\n                        )\n                    }\n                }\n                )\n                \n                }\n            </div>\n        )\n    }\n}\n  \n  export default Experience;"]},"metadata":{},"sourceType":"module"}