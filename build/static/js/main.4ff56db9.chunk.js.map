{"version":3,"sources":["components/Banner.js","components/General.js","components/Education.js","components/Experience.js","App.js","index.js"],"names":["Banner","state","src","editFlag","edit","bind","update","this","setState","document","getElementById","value","class","className","for","id","name","type","defaultValue","onClick","href","title","Component","General","userName","bio","symbol","label","rows","Education","school","yearStarted","yearFinished","degreeType","areaOfStudy","editEducation","updateEducation","min","max","step","Experience","jobs","uniqid","employer","role","responsibilities","yearEnded","placeholderJob","defaultJob","activeEditFlag","addJobFlag","editJob","updateJob","addJob","removeJob","submitNewJob","addResponsibility","removeResponsibility","toggleEditVisibility","e","newJobNode","target","closest","querySelector","newJobResponsibilityLength","childNodes","length","newJob","i","newJobResponsibility","parentNode","firstChild","push","console","log","job","jobsCopy","selectedJob","find","blah","selectedJobNode","selectedResponsibility","jobsCopyIndex","findIndex","jobCopy","splice","classList","contains","placeholderJobCopy","children","placeholderNodeID","responsibilitiesNode","childrenArrayIndex","Array","from","node","selectedNodeID","updateActiveEditFlag","editJobButton","innerHTML","add","remove","toggle","placeholder","map","responsibility","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4ff56db9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Banner extends Component {\n    constructor() {\n        super()\n        this.state = {\n            src: \"https://i.pinimg.com/originals/3b/29/ee/3b29ee0897204e6ece68886641afcb63.png\",\n            editFlag: false,\n        }\n\n        this.edit = this.edit.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    edit(){\n        this.setState({\n            editFlag: !this.state.editFlag,\n        })\n    }\n\n    update(){\n        const src = document.getElementById(\"banner-src\").value;\n\n        this.setState({\n            src: src,\n            editFlag: !this.state.editFlag,\n        })\n    }\n\n    render() {\n        if(this.state.editFlag === true){\n            return (\n                <div class=\"container\">\n                    <img className=\"image-banner\" src={this.state.src} />\n                    <label for=\"banner-src\">image URL: </label>\n                    <input id=\"banner-src\" name=\"banner-src\" type=\"text\" defaultValue={this.state.src}></input>\n                    <button onClick={this.update} class=\"btn-green float-right\">all done</button>\n                </div>\n            )\n        } else {\n            return (\n                <div class=\"container\">\n                    <img className=\"image-banner\" src={this.state.src} />\n                    <div class=\"overlay\">\n                        <a href=\"#\" class=\"icon\" title=\"User Profile\">\n                        <i onClick={this.edit} class=\"fas fa-cog\"></i>\n                        </a>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n  \n  export default Banner;","import React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\n\nclass General extends Component {\n    constructor() {\n        super()\n        this.state = {\n            userName: \"Bob\",\n            bio: \"I am a third generation restaurateur and owner and operator of Bob's Burgers. I have a passion for creative burgers.\",\n            editFlag: false,\n        }\n\n        this.edit = this.edit.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    edit(){\n        this.setState({\n            editFlag: !this.state.editFlag,\n        })\n    }\n\n    update(){\n        const userName = document.getElementById(\"input-user-name\").value\n        const bio = document.getElementById(\"input-bio\").value\n\n        this.setState({\n            userName: userName,\n            bio: bio,\n            editFlag: !this.state.editFlag,\n        })\n    }\n\n    render() {\n        if(this.state.editFlag === true){\n        return (\n            <div>\n                <h1>\n                    Hi, my name is <input id=\"input-user-name\" type=\"text\" defaultValue={this.state.userName}></input> <Emoji symbol=\"👋\" label=\"wave-hand\" />\n                    <button onClick={this.update} className=\"float-right btn-green\">all done</button>\n                </h1>\n                <div>\n                    <label for=\"bio\">tell us about yourself: </label>\n                </div>\n                <textarea id=\"input-bio\" name=\"bio\" rows=\"5\" defaultValue={this.state.bio} ></textarea>\n\n            </div>\n        )\n        } else {\n        return (\n            <div>\n                <h1>\n                    Hi, my name is <span id=\"user-name\">{this.state.userName}</span> <Emoji symbol=\"👋\" label=\"wave-hand\" />\n                    <button onClick={this.edit} className=\"float-right\"><i class=\"fas fa-cog\"></i></button>\n                </h1>\n                <p id=\"bio\">\n                    {this.state.bio}\n                </p>\n            </div>\n        )\n    }\n    }\n}\n  \n  export default General;","import React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\n\nclass Education extends Component {\n    constructor() {\n        super()\n        this.state = {\n            school: \"Wagstaff Culinary Institute\",\n            yearStarted: 2006,\n            yearFinished: 2010,\n            degreeType: \"Bachelor's\",\n            areaOfStudy: \"Culinary Arts\",\n            editFlag: false,\n        }\n\n        this.editEducation = this.editEducation.bind(this);\n        this.updateEducation = this.updateEducation.bind(this);\n    }\n\n    editEducation(){\n        this.setState({\n            editFlag: !this.state.editFlag,\n        })\n    }\n\n    updateEducation(){\n        const school = document.getElementById(\"input-school\").value\n        const yearStarted = document.getElementById(\"input-year-started\").value\n        const yearFinished = document.getElementById(\"input-year-finished\").value\n        const degreeType = document.getElementById(\"input-degree-type\").value\n        const areaOfStudy = document.getElementById(\"input-area-of-study\").value\n\n        this.setState({\n            school: school,\n            yearStarted: yearStarted,\n            yearFinished: yearFinished,\n            degreeType: degreeType,\n            areaOfStudy: areaOfStudy,\n            editFlag: !this.state.editFlag,\n        })\n    }\n\n    render() {\n        if(this.state.editFlag === true){\n        return (\n            <div>\n                <h1>\n                    Education <Emoji symbol=\"🎓\" label=\"graduation-cap\" />\n                    <button onClick={this.updateEducation} className=\"float-right btn-green\">all done</button>\n                </h1>\n                <div>\n                    <label for=\"education\">school: </label>\n                    <input name=\"school\" id=\"input-school\" type=\"text\" defaultValue={this.state.school}></input>\n                </div>\n                <div>\n                    <label for=\"area-of-study\">area of study: </label>\n                    <input name=\"area-of-study\" id=\"input-area-of-study\" type=\"text\" defaultValue={this.state.areaOfStudy}></input>\n                </div>\n                <div>\n                    <label for=\"degree-type\">degree type: </label>\n                    <select name=\"degree-type\" id=\"input-degree-type\" name=\"degree_type\" defaultValue={this.state.school}>\n                        <option>Bachelor's</option>\n                        <option>Master's</option>\n                        <option>Ph.D</option>\n                    </select>\n                    <span className=\"float-right\">\n                        <input id=\"input-year-started\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={this.state.yearStarted} />\n                        -\n                        <input id=\"input-year-finished\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={this.state.yearFinished} />\n                    </span>\n                </div>\n                    \n            </div>\n        )\n        } else {\n        return (\n            <div>\n                <h1>\n                    Education <Emoji symbol=\"🎓\" label=\"graduation-cap\" />\n                    <button onClick={this.editEducation} className=\"float-right\"><i class=\"fas fa-cog\"></i></button>\n                </h1>\n                <div>\n                    <span id=\"school-text\">\n                        {this.state.school}\n                    </span>\n                </div>\n                \n                <div>\n                    {this.state.degreeType} - {this.state.areaOfStudy}\n                     <span className=\"float-right\">\n                        {this.state.yearStarted} - {this.state.yearFinished}\n                    </span>\n                </div>\n            </div>\n        )}\n    }\n}\n  \n  export default Education;","import React, { Component } from 'react';\nimport Emoji from 'a11y-react-emoji';\nimport uniqid from \"uniqid\";\n\nclass Experience extends Component {\n    constructor() {\n        super()\n        this.state = {\n            jobs: [\n                {\n                    id: uniqid(),\n                    employer: \"Bob's Burgers\",\n                    role: \"Chef, Owner and Operator\",\n                    responsibilities: [\n                        \"Make the burgers\",\n                        \"Serve the burgers\",\n                        \"Clean up afterwards\",\n                    ],\n                    yearStarted: 2011,\n                    yearEnded: 2020,\n                    editFlag: false,\n                },\n                {\n                    id: uniqid(),\n                    employer: \"Big Bob's Diner\",\n                    role: \"Cook and Server\",\n                    responsibilities: [\n                        \"Take orders\",\n                        \"Cook the orders\",\n                        \"Serve the orders\",\n                    ],\n                    yearStarted: 2001,\n                    yearEnded: 2010,\n                    editFlag: false,\n                },\n            ],\n            placeholderJob: {\n                responsibilities: [\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                ],\n            },\n            defaultJob: {\n                responsibilities: [\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                    \"describe responsibility here\",\n                ],\n            },\n            activeEditFlag: false,\n            addJobFlag: false,\n        }\n\n        this.editJob = this.editJob.bind(this);\n        this.updateJob = this.updateJob.bind(this);\n        this.addJob = this.addJob.bind(this);\n        this.removeJob = this.removeJob.bind(this);\n        this.submitNewJob = this.submitNewJob.bind(this);\n        this.addResponsibility = this.addResponsibility.bind(this);\n        this.removeResponsibility = this.removeResponsibility.bind(this);\n        this.toggleEditVisibility = this.toggleEditVisibility.bind(this);\n    }\n\n    submitNewJob(e){\n        const newJobNode = e.target.closest(\".new-job\");\n\n        const employer = newJobNode.querySelector(\".edit-employer\").value;\n        const role = newJobNode.querySelector(\".edit-role\").value;\n        const yearStarted = newJobNode.querySelector(\".edit-year-started\").value;\n        const yearEnded = newJobNode.querySelector(\".edit-year-ended\").value;\n        const newJobResponsibilityLength = newJobNode.querySelector(\".edit-responsibilities\").childNodes.length;\n\n        const newJob = {\n            id: uniqid(),\n            employer: employer,\n            role: role,\n            responsibilities: [],\n            yearStarted: yearStarted,\n            yearEnded: yearEnded,\n            editFlag: false,\n        }\n\n        for(let i = 0; i < newJobResponsibilityLength; i++){\n            const children = newJobNode.parentNode.querySelector(\".edit-responsibilities\");\n            let newJobResponsibility = children.childNodes[i].firstChild.value;\n            newJob.responsibilities.push(newJobResponsibility);\n        }\n  \n        this.setState({\n            // jobs: [...this.state.jobs, newJob],\n            jobs: [newJob, ...this.state.jobs],\n            addJobFlag: !this.state.addJobFlag,\n            placeholderJob: this.state.defaultJob,\n        })\n        console.log(this.state.jobs)\n    }\n\n    editJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        selectedJob.editFlag = !selectedJob.editFlag;\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    updateJob(job){\n        const jobsCopy = this.state.jobs;\n        let selectedJob = jobsCopy.find(blah => blah.id === job.job.id);\n        let selectedJobNode = document.getElementById(selectedJob.id)\n\n        const employer = selectedJobNode.querySelector(\".edit-employer\").value;\n        const role = selectedJobNode.querySelector(\".edit-role\").value;\n        const yearStarted = selectedJobNode.querySelector(\".edit-year-started\").value;\n        const yearEnded = selectedJobNode.querySelector(\".edit-year-ended\").value;\n\n        for(let i =0; i < selectedJob.responsibilities.length; i++){\n            const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n            let selectedResponsibility = children.childNodes[i].firstChild.value;\n            selectedJob.responsibilities[i] = selectedResponsibility;\n        }\n\n        selectedJob.employer = employer;\n        selectedJob.role = role;\n        selectedJob.yearStarted = yearStarted;\n        selectedJob.yearEnded = yearEnded;\n        selectedJob.editFlag = !selectedJob.editFlag;\n\n        this.setState({\n          jobs: jobsCopy,\n        })\n    }\n\n    addJob(){\n        this.setState({\n            addJobFlag: !this.state.addJobFlag,\n        })\n    }\n\n    removeJob(e,job){\n        const jobsCopy = this.state.jobs;\n        const jobsCopyIndex = jobsCopy.findIndex(jobCopy => jobCopy.id === job.id);\n\n        jobsCopy.splice(jobsCopyIndex,1);\n\n        this.setState({\n            jobs: jobsCopy,\n        })\n    }\n\n    addResponsibility(e,job){\n        const checkIfNewJob = e.target.closest(\".job-block\").classList.contains(\"new-job\");\n\n        if(checkIfNewJob){\n            const placeholderJobCopy = this.state.placeholderJob;\n            const placeholderJobNode = e.target.closest(\".new-job\");\n            const children = placeholderJobNode.querySelector(\".edit-responsibilities\");\n            const newResp = \"describe responsibility here\";\n\n            for(let i =0; i < placeholderJobCopy.responsibilities.length; i++){\n                let selectedResponsibility = children.childNodes[i].firstChild.value;\n                placeholderJobCopy.responsibilities[i] = selectedResponsibility;\n            }\n\n            placeholderJobCopy.responsibilities = [...this.state.placeholderJob.responsibilities, newResp]\n    \n            this.setState({\n                placeholderJob: placeholderJobCopy\n            })\n        } else {\n            const jobsCopy = this.state.jobs;\n            const selectedJob = jobsCopy.find(blah => blah.id === job.id);\n            const selectedJobNode = document.getElementById(job.id);\n            const children = selectedJobNode.querySelector(\".edit-responsibilities\");\n            const newResp = \"describe responsibility here\";\n            \n\n            for(let i =0; i < selectedJob.responsibilities.length; i++){\n                let selectedResponsibility = children.childNodes[i].firstChild.value;\n                selectedJob.responsibilities[i] = selectedResponsibility;\n            }\n\n            selectedJob.responsibilities.push(newResp);\n    \n            this.setState({\n                jobs: jobsCopy,\n            })\n        }\n    }\n\n    removeResponsibility(e,job){\n        const checkIfNewJob = e.target.closest(\".job-block\").classList.contains(\"new-job\");\n\n        if(checkIfNewJob){\n            const placeholderJobCopy = this.state.placeholderJob;\n            const placeholderNodeID = e.target.parentNode.id;\n            const responsibilitiesNode = e.target.closest(\".edit-responsibilities\");\n            const childrenArray = Array.from(responsibilitiesNode.childNodes);\n            const childrenArrayIndex = childrenArray.findIndex(node => node.id === placeholderNodeID);\n\n            for(let i = 0; i < placeholderJobCopy.responsibilities.length; i++){\n                let selectedResponsibility = responsibilitiesNode.childNodes[i].firstChild.value;\n                placeholderJobCopy.responsibilities[i] = selectedResponsibility;\n            };\n\n            placeholderJobCopy.responsibilities.splice(childrenArrayIndex,1);\n    \n            this.setState({\n                placeholderJob: placeholderJobCopy\n            })\n        } else {\n            const jobsCopy = this.state.jobs;\n            const selectedJob = jobsCopy.find(blah => blah.id === job.id);\n            const selectedNodeID = e.target.parentNode.id;\n            const responsibilitiesNode = e.target.closest(\".edit-responsibilities\");\n            const childrenArray = Array.from(responsibilitiesNode.childNodes);\n            const childrenArrayIndex = childrenArray.findIndex(node => node.id === selectedNodeID);\n\n            for(let i = 0; i < selectedJob.responsibilities.length; i++){\n                let selectedResponsibility = responsibilitiesNode.childNodes[i].firstChild.value;\n                selectedJob.responsibilities[i] = selectedResponsibility;\n            };\n\n            selectedJob.responsibilities.splice(childrenArrayIndex,1);\n\n            this.setState({\n                jobs: jobsCopy,\n            })\n        }\n\n    }\n\n    toggleEditVisibility(){\n        const updateActiveEditFlag = !this.state.activeEditFlag;\n        const editJobButton = document.getElementById(\"edit-job\");\n        const editJobButtonHTML = \"<i class='fas fa-cog'></i>\"\n        if(updateActiveEditFlag === true){\n            editJobButton.innerHTML = \"all done\";\n            editJobButton.classList.add(\"btn-green-inverse\");\n        } else {\n            editJobButton.innerHTML = editJobButtonHTML;\n            editJobButton.classList.remove(\"btn-green-inverse\");\n        }\n        \n        const addJobButton = document.getElementById(\"add-job\");\n        addJobButton.classList.toggle(\"edit-job-hidden\");\n\n        this.setState({\n            activeEditFlag: updateActiveEditFlag,\n        })\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Experience <Emoji symbol=\"💼\" label=\"briefcase\" />\n                    <button id=\"edit-job\" onClick={this.toggleEditVisibility} className=\"float-right\"><i class=\"fas fa-cog\"></i></button>\n                </h1>\n                <button id=\"add-job\" onClick={this.addJob} className=\" edit-job-toggle edit-job-hidden btn-green btn-add-margin\">add job</button>\n\n                {\n                    this.state.addJobFlag &&\n\n                    <div className=\"job-block new-job\">\n                        <div>\n                            <label for=\"role\">role: </label>\n                            <input name=\"role\" className=\"edit-role\" type=\"text\" placeholder=\"what was your job title?\"/>\n                        </div>\n                        <label for=\"employer\">employer: </label>\n                        <input name=\"employer\" className=\"edit-employer\" type=\"text\" placeholder=\"who did you work for?\" />\n                        <span className=\"float-right\">\n                            <input className=\"edit-year-started\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" placeholder=\"2020\" />\n                            -\n                            <input className=\"edit-year-ended\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" placeholder=\"2020\" />\n                        </span>\n                        <div>\n                            <ul className=\"edit-responsibilities\">\n                                {\n                                    this.state.placeholderJob.responsibilities.map(\n                                    (responsibility) => \n                                    <li key={uniqid()} id={uniqid()}>\n                                        <input id={uniqid()} className=\"edit-responsibility\" type=\"text\" placeholder={responsibility} /> <i onClick={(e) => this.removeResponsibility(e)} className=\"fas fa-times\"></i>\n                                    </li>\n                                    )\n                                }\n                            </ul>\n                            <button onClick={(e) => this.addResponsibility(e)} className=\"btn-add-responsibility\"><i class=\"fas fa-plus\"></i> add line item</button>\n                        </div>\n\n                        <button onClick={(e) => this.submitNewJob(e)} className=\"btn-green btn-add-margin\">all done</button>\n                    </div>\n                }\n\n                {this.state.jobs.map(\n                    (job) => {if(job.editFlag === true){\n                        return (\n                            <div id={job.id} className=\"job-block\">\n                                <div>\n                                    <label for=\"role\">role: </label>\n                                    <input name=\"role\" className=\"edit-role\" type=\"text\" defaultValue={job.role} />\n                                </div>\n                                <label for=\"employer\">employer: </label>\n                                <input className=\"edit-employer\" type=\"text\" defaultValue={job.employer} />\n                                \n                                <span className=\"float-right\">\n                                    <input className=\"edit-year-started\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={job.yearStarted} />\n                                    -\n                                    <input className=\"edit-year-ended\" type=\"number\" min=\"1900\" max=\"2099\" step=\"1\" defaultValue={job.yearEnded} />\n                                </span>\n                                <div>\n                                    <ul className=\"edit-responsibilities\">\n                                        {\n                                            job.responsibilities.map(\n                                            (responsibility) => \n                                            <li key={uniqid()} id={uniqid()}>\n                                                <input id={uniqid()} className=\"edit-responsibility\" type=\"text\" defaultValue={responsibility} /> <i onClick={(e) => this.removeResponsibility(e,job)} className=\"btn-dimgray fas fa-times\"></i>\n                                            </li>\n                                            )\n                                        }\n                                    </ul>\n                                    <button onClick={(e) => this.addResponsibility(e,job)} className=\"btn-add-responsibility\"><i class=\"fas fa-plus\"></i> add line item</button>\n                                </div>\n                                <div>\n                                    <button onClick={() => this.updateJob({job})} className=\"btn-green btn-add-margin\">all done</button>\n                                    <button onClick={(e) => this.removeJob(e,job)} className=\"btn-red btn-add-margin float-right\">delete</button>\n                                </div>\n                            </div>\n                        )\n                    } else if(this.state.activeEditFlag === true) {\n                        return (\n                            <div>\n                                <div>\n                                    {job.role}\n                                    <button onClick={() => this.editJob({job})} className=\"float-right\"><i class=\"fas fa-cog\"></i></button>\n                                </div>\n                                <div>\n                                    {job.employer}\n                                    <span className=\"float-right\">\n                                        {job.yearStarted} - {job.yearEnded}\n                                    </span>\n                                </div>\n\n                                <ul>\n                                    {job.responsibilities.map(\n                                        (responsibility) => \n                                        <li key={uniqid()} id={uniqid()}>{responsibility}</li>)}\n                                </ul>\n                                \n                            </div>\n                        )\n                    } else {\n                        return (\n                            <div>\n                                <div>\n                                    <span className=\"job-role\">{job.role}</span>\n                                    <button onClick={() => this.editJob({job})} className=\"float-right edit-job-hidden\"><i class=\"fas fa-cog\"></i></button>\n                                </div>\n                                <div>\n                                    {job.employer}\n                                    <span className=\"float-right\">\n                                        {job.yearStarted} - {job.yearEnded}\n                                    </span>\n                                </div>\n\n                                <ul>\n                                    {job.responsibilities.map(\n                                        (responsibility) => \n                                        <li key={uniqid()} id={uniqid()}>{responsibility}</li>)}\n                                </ul>\n                                \n                            </div>\n                        )\n                    }\n                }\n                )\n                \n                }\n            </div>\n        )\n    }\n}\n  \n  export default Experience;","import './App.css';\nimport Banner from './components/Banner';\nimport General from './components/General';\nimport Education from './components/Education';\nimport Experience from './components/Experience';\n// import Hr from 'react-native-hr';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Banner />\n      <General />\n      {/* <Hr /> */}\n      <Education />\n      <Experience />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}